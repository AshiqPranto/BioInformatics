Type = c(rep("Control1", times = 100,rep("Control2", times = 100))
View(plotData)
View(plotData);
plotData <- data.frame(
GeneName = c(rownames(pseudoCount[100,]), rownames(pseudoCount[100,])),
CountValue = c(pseudoCount[100, 1], pseudoCount[100, 2]),
#Type = c(rep("Control1", times = nrow(pseudoCount)),rep("Control2", times = nrow(pseudoCount)))
Type = c(rep("Control1", times = 100),rep("Control2", times = 100)
));
View(plotData);
View(pseudoCount[100,1])
pseudoCount[100,1]
pseudoCount[1:100,1]
View(pseudoCount)
plotData <- data.frame(
GeneName = c(rownames(pseudoCount[1:100,]), rownames(pseudoCount[1:100,])),
CountValue = c(pseudoCount[1:100, 1], pseudoCount[1:100, 2]),
#Type = c(rep("Control1", times = nrow(pseudoCount)),rep("Control2", times = nrow(pseudoCount)))
Type = c(rep("Control1", times = 100),rep("Control2", times = 100)
));
View(plotData);
scatter_plot <- ggplot(plotData, aes(x = GeneName, y = CountValue, color = Type)) + geom_point() +
labs(x = "Gene", y = "CountsValue", color = "Type");
print(scatter_plot)
#After cpm normalization
plotData <- data.frame(
GeneName = c(rownames(cpmPseudoCount[1:100,]), rownames(pseudoCount[1:100,])),
CountValue = c(cpmPseudoCount[1:100, 1], cpmPseudoCount[1:100, 2]),
Type = c(rep("Control1", times = 100),rep("Control2", times = 100))
)
scatter_plot <- ggplot(plotData, aes(x = GeneName, y = CountValue, color = Type)) + geom_point() +
labs(x = "Gene", y = "CountsValue", color = "Type")
print(scatter_plot)
#After cpm normalization
plotData <- data.frame(
GeneName = c(rownames(cpmPseudoCount[1:100,]), rownames(pseudoCount[1:100,])),
CountValue = c(cpmPseudoCount[1:100, 1], cpmPseudoCount[1:100, 2]),
Type = c(rep("Control1", times = 100),rep("Control2", times = 100))
)
scatter_plot <- ggplot(plotData, aes(x = GeneName, y = CountValue, color = Type)) + geom_point() +
labs(x = "Gene", y = "CountsValue", color = "Type")
print(scatter_plot)
#BiocManager::install("edgeR")
library(edgeR)
cpmPseudoCount <- cpm(pseudoCount)
plotData <- data.frame(
GeneName = c(rownames(pseudoCount[1:100,]), rownames(pseudoCount[1:100,])),
CountValue = c(pseudoCount[1:100, 1], pseudoCount[1:100, 2]),
#Type = c(rep("Control1", times = nrow(pseudoCount)),rep("Control2", times = nrow(pseudoCount)))
Type = c(rep("Control1", times = 100),rep("Control2", times = 100)
));
#View(plotData);
scatter_plot <- ggplot(plotData, aes(x = GeneName, y = CountValue, color = Type)) + geom_point() +
labs(x = "Gene", y = "CountsValue", color = "Type");
print(scatter_plot)
#After cpm normalization
plotData <- data.frame(
GeneName = c(rownames(cpmPseudoCount[1:100,]), rownames(pseudoCount[1:100,])),
CountValue = c(cpmPseudoCount[1:100, 1], cpmPseudoCount[1:100, 2]),
Type = c(rep("Control1", times = 100),rep("Control2", times = 100))
)
scatter_plot <- ggplot(plotData, aes(x = GeneName, y = CountValue, color = Type)) + geom_point() +
labs(x = "Gene", y = "CountsValue", color = "Type")
print(scatter_plot)
numOfGene <- 100;
#BiocManager::install("edgeR")
library(edgeR)
cpmPseudoCount <- cpm(pseudoCount)
numOfGene <- 100;
plotData <- data.frame(
GeneName = c(rownames(pseudoCount[1:numOfGene,]), rownames(pseudoCount[1:numOfGene,])),
CountValue = c(pseudoCount[1:numOfGene, 1], pseudoCount[1:numOfGene, 2]),
#Type = c(rep("Control1", times = nrow(pseudoCount)),rep("Control2", times = nrow(pseudoCount)))
Type = c(rep("Control1", times = numOfGene),rep("Control2", times = numOfGene)
));
#View(plotData);
scatter_plot <- ggplot(plotData, aes(x = GeneName, y = CountValue, color = Type)) + geom_point() +
labs(x = "Gene", y = "CountsValue", color = "Type");
print(scatter_plot)
#After cpm normalization
plotData <- data.frame(
GeneName = c(rownames(cpmPseudoCount[1:numOfGene,]), rownames(pseudoCount[1:numOfGene,])),
CountValue = c(cpmPseudoCount[1:numOfGene, 1], cpmPseudoCount[1:numOfGene, 2]),
Type = c(rep("Control1", times = numOfGene),rep("Control2", times = numOfGene))
)
scatter_plot <- ggplot(plotData, aes(x = GeneName, y = CountValue, color = Type)) + geom_point() +
labs(x = "Gene", y = "CountsValue", color = "Type")
print(scatter_plot)
#BiocManager::install("edgeR")
library(edgeR)
cpmPseudoCount <- cpm(pseudoCount)
numOfGene <- 200;
plotData <- data.frame(
GeneName = c(rownames(pseudoCount[1:numOfGene,]), rownames(pseudoCount[1:numOfGene,])),
CountValue = c(pseudoCount[1:numOfGene, 1], pseudoCount[1:numOfGene, 2]),
#Type = c(rep("Control1", times = nrow(pseudoCount)),rep("Control2", times = nrow(pseudoCount)))
Type = c(rep("Control1", times = numOfGene),rep("Control2", times = numOfGene)
));
#View(plotData);
scatter_plot <- ggplot(plotData, aes(x = GeneName, y = CountValue, color = Type)) + geom_point() +
labs(x = "Gene", y = "CountsValue", color = "Type");
print(scatter_plot)
#After cpm normalization
plotData <- data.frame(
GeneName = c(rownames(cpmPseudoCount[1:numOfGene,]), rownames(pseudoCount[1:numOfGene,])),
CountValue = c(cpmPseudoCount[1:numOfGene, 1], cpmPseudoCount[1:numOfGene, 2]),
Type = c(rep("Control1", times = numOfGene),rep("Control2", times = numOfGene))
)
scatter_plot <- ggplot(plotData, aes(x = GeneName, y = CountValue, color = Type)) + geom_point() +
labs(x = "Gene", y = "CountsValue", color = "Type")
print(scatter_plot)
#BiocManager::install("edgeR")
library(edgeR)
cpmPseudoCount <- cpm(pseudoCount)
numOfGene <- 200;
plotData <- data.frame(
GeneName = c(rownames(pseudoCount[1:numOfGene,]), rownames(pseudoCount[1:numOfGene,])),
CountValue = c(pseudoCount[1:numOfGene, 1], pseudoCount[1:numOfGene, 2]),
#Type = c(rep("Control1", times = nrow(pseudoCount)),rep("Control2", times = nrow(pseudoCount)))
Type = c(rep("Control1", times = numOfGene),rep("Control2", times = numOfGene)
));
#View(plotData);
scatter_plot <- ggplot(plotData, aes(x = GeneName, y = CountValue, color = Type)) + geom_point() +
labs(x = "Gene", y = "CountsValue", color = "Type") +
ggtitle("Before CPM Normalization");
print(scatter_plot)
#After cpm normalization
plotData <- data.frame(
GeneName = c(rownames(cpmPseudoCount[1:numOfGene,]), rownames(pseudoCount[1:numOfGene,])),
CountValue = c(cpmPseudoCount[1:numOfGene, 1], cpmPseudoCount[1:numOfGene, 2]),
Type = c(rep("Control1", times = numOfGene),rep("Control2", times = numOfGene))
)
scatter_plot <- ggplot(plotData, aes(x = GeneName, y = CountValue, color = Type)) + geom_point() +
labs(x = "Gene", y = "CountsValue", color = "Type") +
ggtitle("After CPM Normalization");
print(scatter_plot)
#BiocManager::install("edgeR")
library(edgeR)
cpmPseudoCount <- cpm(pseudoCount)
numOfGene <- 300;
plotData <- data.frame(
GeneName = c(rownames(pseudoCount[1:numOfGene,]), rownames(pseudoCount[1:numOfGene,])),
CountValue = c(pseudoCount[1:numOfGene, 1], pseudoCount[1:numOfGene, 2]),
#Type = c(rep("Control1", times = nrow(pseudoCount)),rep("Control2", times = nrow(pseudoCount)))
Type = c(rep("Control1", times = numOfGene),rep("Control2", times = numOfGene)
));
#View(plotData);
scatter_plot <- ggplot(plotData, aes(x = GeneName, y = CountValue, color = Type)) + geom_point() +
labs(x = "Gene", y = "CountsValue", color = "Type") +
ggtitle("Before CPM Normalization");
print(scatter_plot)
#After cpm normalization
plotData <- data.frame(
GeneName = c(rownames(cpmPseudoCount[1:numOfGene,]), rownames(pseudoCount[1:numOfGene,])),
CountValue = c(cpmPseudoCount[1:numOfGene, 1], cpmPseudoCount[1:numOfGene, 2]),
Type = c(rep("Control1", times = numOfGene),rep("Control2", times = numOfGene))
)
scatter_plot <- ggplot(plotData, aes(x = GeneName, y = CountValue, color = Type)) + geom_point() +
labs(x = "Gene", y = "CountsValue", color = "Type") +
ggtitle("After CPM Normalization");
print(scatter_plot)
#BiocManager::install("edgeR")
library(edgeR)
cpmPseudoCount <- cpm(pseudoCount, normalized.lib.sizes = TRUE)
numOfGene <- 300;
plotData <- data.frame(
GeneName = c(rownames(pseudoCount[1:numOfGene,]), rownames(pseudoCount[1:numOfGene,])),
CountValue = c(pseudoCount[1:numOfGene, 1], pseudoCount[1:numOfGene, 2]),
#Type = c(rep("Control1", times = nrow(pseudoCount)),rep("Control2", times = nrow(pseudoCount)))
Type = c(rep("Control1", times = numOfGene),rep("Control2", times = numOfGene)
));
#View(plotData);
scatter_plot <- ggplot(plotData, aes(x = GeneName, y = CountValue, color = Type)) + geom_point() +
labs(x = "Gene", y = "CountsValue", color = "Type") +
ggtitle("Before CPM Normalization");
print(scatter_plot)
#After cpm normalization
plotData <- data.frame(
GeneName = c(rownames(cpmPseudoCount[1:numOfGene,]), rownames(pseudoCount[1:numOfGene,])),
CountValue = c(cpmPseudoCount[1:numOfGene, 1], cpmPseudoCount[1:numOfGene, 2]),
Type = c(rep("Control1", times = numOfGene),rep("Control2", times = numOfGene))
)
scatter_plot <- ggplot(plotData, aes(x = GeneName, y = CountValue, color = Type)) + geom_point() +
labs(x = "Gene", y = "CountsValue", color = "Type") +
ggtitle("After CPM Normalization");
print(scatter_plot)
#BiocManager::install("edgeR")
library(edgeR)
cpmPseudoCount <- cpm(pseudoCount)
numOfGene <- 300;
plotData <- data.frame(
GeneName = c(rownames(pseudoCount[1:numOfGene,]), rownames(pseudoCount[1:numOfGene,])),
CountValue = c(pseudoCount[1:numOfGene, 1], pseudoCount[1:numOfGene, 2]),
#Type = c(rep("Control1", times = nrow(pseudoCount)),rep("Control2", times = nrow(pseudoCount)))
Type = c(rep("Control1", times = numOfGene),rep("Control2", times = numOfGene)
));
#View(plotData);
scatter_plot <- ggplot(plotData, aes(x = GeneName, y = CountValue, color = Type)) + geom_point() +
labs(x = "Gene", y = "CountsValue", color = "Type") +
ggtitle("Before CPM Normalization");
print(scatter_plot)
#After cpm normalization
plotData <- data.frame(
GeneName = c(rownames(cpmPseudoCount[1:numOfGene,]), rownames(pseudoCount[1:numOfGene,])),
CountValue = c(cpmPseudoCount[1:numOfGene, 1], cpmPseudoCount[1:numOfGene, 2]),
Type = c(rep("Control1", times = numOfGene),rep("Control2", times = numOfGene))
)
scatter_plot <- ggplot(plotData, aes(x = GeneName, y = CountValue, color = Type)) + geom_point() +
labs(x = "Gene", y = "CountsValue", color = "Type") +
ggtitle("After CPM Normalization");
print(scatter_plot)
#BiocManager::install("edgeR")
library(edgeR)
#cpmPseudoCount <- cpm(pseudoCount)
cpmPseudoCount <- calcNormFactors(..., method = "upperquartile", p = 0.75)
#BiocManager::install("edgeR")
library(edgeR)
#cpmPseudoCount <- cpm(pseudoCount)
cpmPseudoCount <- calcNormFactors(..., method = "upperquartile", p = 0.75);
#BiocManager::install("edgeR")
library(edgeR)
#cpmPseudoCount <- cpm(pseudoCount)
cpmPseudoCount <- calcNormFactors(psueudoCount, method = "upperquartile", p = 0.75);
#BiocManager::install("edgeR")
library(edgeR)
#cpmPseudoCount <- cpm(pseudoCount)
cpmPseudoCount <- calcNormFactors(psueudoCount, method = "upperquartile", p = 0.75);
View(pseudoCount)
#cpmPseudoCount <- cpm(pseudoCount)
head(pseudoCount)
#BiocManager::install("edgeR")
library(edgeR)
#cpmPseudoCount <- cpm(pseudoCount)
head(pseudoCount)
cpmPseudoCount <- calcNormFactors(pseudoCount, method = "upperquartile", p = 0.75);
numOfGene <- 300;
plotData <- data.frame(
GeneName = c(rownames(pseudoCount[1:numOfGene,]), rownames(pseudoCount[1:numOfGene,])),
CountValue = c(pseudoCount[1:numOfGene, 1], pseudoCount[1:numOfGene, 2]),
#Type = c(rep("Control1", times = nrow(pseudoCount)),rep("Control2", times = nrow(pseudoCount)))
Type = c(rep("Control1", times = numOfGene),rep("Control2", times = numOfGene)
));
#View(plotData);
scatter_plot <- ggplot(plotData, aes(x = GeneName, y = CountValue, color = Type)) + geom_point() +
labs(x = "Gene", y = "CountsValue", color = "Type") +
ggtitle("Before CPM Normalization");
print(scatter_plot)
#After cpm normalization
plotData <- data.frame(
GeneName = c(rownames(cpmPseudoCount[1:numOfGene,]), rownames(pseudoCount[1:numOfGene,])),
CountValue = c(cpmPseudoCount[1:numOfGene, 1], cpmPseudoCount[1:numOfGene, 2]),
Type = c(rep("Control1", times = numOfGene),rep("Control2", times = numOfGene))
)
#BiocManager::install("edgeR")
library(edgeR)
#cpmPseudoCount <- cpm(pseudoCount)
cpmPseudoCount <- calcNormFactors(pseudoCount, method = "upperquartile", p = 0.75);
numOfGene <- 300;
plotData <- data.frame(
GeneName = c(rownames(pseudoCount[1:numOfGene,]), rownames(pseudoCount[1:numOfGene,])),
CountValue = c(pseudoCount[1:numOfGene, 1], pseudoCount[1:numOfGene, 2]),
#Type = c(rep("Control1", times = nrow(pseudoCount)),rep("Control2", times = nrow(pseudoCount)))
Type = c(rep("Control1", times = numOfGene),rep("Control2", times = numOfGene)
));
#View(plotData);
scatter_plot <- ggplot(plotData, aes(x = GeneName, y = CountValue, color = Type)) + geom_point() +
labs(x = "Gene", y = "CountsValue", color = "Type") +
ggtitle("Before CPM Normalization");
print(scatter_plot)
#After cpm normalization
plotData <- data.frame(
GeneName = c(rownames(cpmPseudoCount[1:numOfGene,]), rownames(pseudoCount[1:numOfGene,])),
CountValue = c(cpmPseudoCount[1:numOfGene, 1], cpmPseudoCount[1:numOfGene, 2]),
Type = c(rep("Control1", times = numOfGene),rep("Control2", times = numOfGene))
)
#cpmPseudoCount <- cpm(pseudoCount)
cpmPseudoCount <- calcNormFactors(pseudoCount, method = "upperquartile", p = 0.75);
numOfGene <- 300;
plotData <- data.frame(
GeneName = c(rownames(pseudoCount[1:numOfGene,]), rownames(pseudoCount[1:numOfGene,])),
CountValue = c(pseudoCount[1:numOfGene, 1], pseudoCount[1:numOfGene, 2]),
#Type = c(rep("Control1", times = nrow(pseudoCount)),rep("Control2", times = nrow(pseudoCount)))
Type = c(rep("Control1", times = numOfGene),rep("Control2", times = numOfGene)
));
#View(plotData);
scatter_plot <- ggplot(plotData, aes(x = GeneName, y = CountValue, color = Type)) + geom_point() +
labs(x = "Gene", y = "CountsValue", color = "Type") +
ggtitle("Before CPM Normalization");
print(scatter_plot)
#After cpm normalization
plotData <- data.frame(
GeneName = c(rownames(cpmPseudoCount[1:numOfGene,]), rownames(pseudoCount[1:numOfGene,])),
CountValue = c(cpmPseudoCount[1:numOfGene, 1], cpmPseudoCount[1:numOfGene, 2]),
Type = c(rep("Control1", times = numOfGene),rep("Control2", times = numOfGene))
)
scatter_plot <- ggplot(plotData, aes(x = GeneName, y = CountValue, color = Type)) + geom_point() +
labs(x = "Gene", y = "CountsValue", color = "Type") +
ggtitle("After CPM Normalization");
#After cpm normalization
plotData <- data.frame(
GeneName = c(rownames(cpmPseudoCount[1:numOfGene,]), rownames(pseudoCount[1:numOfGene,])),
CountValue = c(cpmPseudoCount[1:numOfGene, 1], cpmPseudoCount[1:numOfGene, 2]),
Type = c(rep("Control1", times = numOfGene),rep("Control2", times = numOfGene))
)
#After cpm normalization
plotData <- data.frame(
GeneName = c(rownames(cpmPseudoCount[1:numOfGene,]), rownames(pseudoCount[1:numOfGene,])),
CountValue = c(cpmPseudoCount[1:numOfGene, 1], cpmPseudoCount[1:numOfGene, 2]),
Type = c(rep("Control1", times = numOfGene),rep("Control2", times = numOfGene))
)
#After cpm normalization
plotData <- data.frame(
GeneName = c(rownames(PseudoCount[1:numOfGene,]), rownames(pseudoCount[1:numOfGene,])),
CountValue = c(cpmPseudoCount[1:numOfGene, 1], cpmPseudoCount[1:numOfGene, 2]),
Type = c(rep("Control1", times = numOfGene),rep("Control2", times = numOfGene))
)
#After cpm normalization
plotData <- data.frame(
GeneName = c(rownames(pseudoCount[1:numOfGene,]), rownames(pseudoCount[1:numOfGene,])),
CountValue = c(cpmPseudoCount[1:numOfGene, 1], cpmPseudoCount[1:numOfGene, 2]),
Type = c(rep("Control1", times = numOfGene),rep("Control2", times = numOfGene))
)
str(cpmPseudoCount)
cpmPseudoCount = as.data.frame(cpmPseudoCount)
#BiocManager::install("edgeR")
library(edgeR)
#cpmPseudoCount <- cpm(pseudoCount)
cpmPseudoCount <- calcNormFactors(pseudoCount, method = "upperquartile", p = 0.75);
cpmPseudoCount = as.data.frame(cpmPseudoCount)
numOfGene <- 300;
plotData <- data.frame(
GeneName = c(rownames(pseudoCount[1:numOfGene,]), rownames(pseudoCount[1:numOfGene,])),
CountValue = c(pseudoCount[1:numOfGene, 1], pseudoCount[1:numOfGene, 2]),
#Type = c(rep("Control1", times = nrow(pseudoCount)),rep("Control2", times = nrow(pseudoCount)))
Type = c(rep("Control1", times = numOfGene),rep("Control2", times = numOfGene)
));
#View(plotData);
scatter_plot <- ggplot(plotData, aes(x = GeneName, y = CountValue, color = Type)) + geom_point() +
labs(x = "Gene", y = "CountsValue", color = "Type") +
ggtitle("Before CPM Normalization");
print(scatter_plot)
#After cpm normalization
plotData <- data.frame(
GeneName = c(rownames(pseudoCount[1:numOfGene,]), rownames(pseudoCount[1:numOfGene,])),
CountValue = c(cpmPseudoCount[1:numOfGene, 1], cpmPseudoCount[1:numOfGene, 2]),
Type = c(rep("Control1", times = numOfGene),rep("Control2", times = numOfGene))
)
scatter_plot <- ggplot(plotData, aes(x = GeneName, y = CountValue, color = Type)) + geom_point() +
labs(x = "Gene", y = "CountsValue", color = "Type") +
ggtitle("After CPM Normalization");
print(scatter_plot)
View(cpmPseudoCount)
#cpmPseudoCount <- cpm(pseudoCount)
cpmPseudoCount <- calcNormFactors(pseudoCount, method = "upperquartile", p = 0.75);
cpmPseudoCount = as.data.frame(cpmPseudoCount)
#cpmPseudoCount <- cpm(pseudoCount)
#cpmPseudoCount <- calcNormFactors(pseudoCount, method = "upperquartile", p = 0.75);
cpmPseudoCount <- calcNormFactors(pseudoCount, method = "RLE")
cpmPseudoCount = as.data.frame(cpmPseudoCount)
#cpmPseudoCount <- cpm(pseudoCount)
#cpmPseudoCount <- calcNormFactors(pseudoCount, method = "upperquartile", p = 0.75);
#cpmPseudoCount <- calcNormFactors(pseudoCount, method = "RLE")
cpmPseudoCount <- calcNormFactors(pseudoCount, method = "TMM")
cpmPseudoCount <- cpm(pseudoCount)
#cpmPseudoCount <- calcNormFactors(pseudoCount, method = "upperquartile", p = 0.75);
#cpmPseudoCount <- calcNormFactors(pseudoCount, method = "RLE")
#cpmPseudoCount <- calcNormFactors(pseudoCount, method = "TMM")
cpmPseudoCount = as.data.frame(cpmPseudoCount)
#BiocManager::install("edgeR")
library(edgeR)
cpmPseudoCount <- cpm(pseudoCount)
#cpmPseudoCount <- calcNormFactors(pseudoCount, method = "upperquartile", p = 0.75);
#cpmPseudoCount <- calcNormFactors(pseudoCount, method = "RLE")
#cpmPseudoCount <- calcNormFactors(pseudoCount, method = "TMM")
cpmPseudoCount = as.data.frame(cpmPseudoCount)
View(cpmPseudoCount)
numOfGene <- 300;
plotData <- data.frame(
GeneName = c(rownames(pseudoCount[1:numOfGene,]), rownames(pseudoCount[1:numOfGene,])),
CountValue = c(pseudoCount[1:numOfGene, 1], pseudoCount[1:numOfGene, 2]),
#Type = c(rep("Control1", times = nrow(pseudoCount)),rep("Control2", times = nrow(pseudoCount)))
Type = c(rep("Control1", times = numOfGene),rep("Control2", times = numOfGene)
));
#View(plotData);
scatter_plot <- ggplot(plotData, aes(x = GeneName, y = CountValue, color = Type)) + geom_point() +
labs(x = "Gene", y = "CountsValue", color = "Type") +
ggtitle("Before CPM Normalization");
print(scatter_plot)
#After cpm normalization
plotData <- data.frame(
GeneName = c(rownames(pseudoCount[1:numOfGene,]), rownames(pseudoCount[1:numOfGene,])),
CountValue = c(cpmPseudoCount[1:numOfGene, 1], cpmPseudoCount[1:numOfGene, 2]),
Type = c(rep("Control1", times = numOfGene),rep("Control2", times = numOfGene))
)
scatter_plot <- ggplot(plotData, aes(x = GeneName, y = CountValue, color = Type)) + geom_point() +
labs(x = "Gene", y = "CountsValue", color = "Type") +
ggtitle("After CPM Normalization");
print(scatter_plot)
knitr::opts_chunk$set(echo = TRUE)
library(DESeq2)
set.seed(2)
set.seed(2)
library(DESeq2)
set.seed(2)
nrom(5)
rnorm(5)
set.seed(2)
rnorm(5)
library(DESeq2)
set.seed(2)
rnorm(5)
library(DESeq2)
set.seed(2)
rnorm(5)
set.seed(2)
rnorm(5)
library(DESeq2)
set.seed(2)
rnorm(5)
set.seed(3)
rnorm(5)
library(DESeq2)
set.seed(2)
rnorm(5)
set.seed(2)
rnorm(5)
dds = makeExampleDESeqDataSet()
View(dds)
ddsEstimateSizeFactor = estimateSizeFactors(dds)
View(ddsEstimateSizeFactor)
View(dds)
View(colData(dds))
View(colData(dds).list)
countData(dds)
View(dds$colData)
View(dds$ColData)
View(dds$condition)
View(dds$countData)
print(dds$countData)
View(counts(dds))
print(dds$coldata)
View(dds)
print(dds@colData)
View(counts(dds))
View(dds@colData)
View(dds@colData@listData)
View(dds@colData@metadata)
View(dds@colData@rownames)
View(dds@colData)
View(dds@colData@elementMetadata@listData)
View(dds@colData)
View(ddsEstimateSizeFactor@colData)
View(ddsEstimateSizeFactor@colData@listData)
View(ddsEstimateSizeFactor@colData@listData@sizeFactor)
View(ddsEstimateSizeFactor@colData@listData@sizeFactor@sample1)
View(ddsEstimateSizeFactor@colData@listData)
plotDispEsts(ddsEstimateSizeFactor, ymin = 0.01)
library(edgeR)
plotDispEsts(ddsEstimateSizeFactor)
plotDispEsts(dds)
plotDispEsts(ddsEstimateSizeFactor)
library(DESeq2)
library(edgeR)
dds = makeExampleDESeqDataSet()
ddsEstimateSizeFactor = estimateSizeFactors(dds)
View(counts(dds))
View(ddsEstimateSizeFactor@colData@listData)
plotDispEsts(ddsEstimateSizeFactor)
ddsEstimateDispersions = estimateDispersions(ddsEstimateSizeFactor)
plotDispEsts(ddsEstimateDispersions)
plotDispEsts(ddsEstimateDispersions, ymin=0.01)
library(edgeR)
set.seed(2)
y = conts(makeExampleDESeqDataSet())
library(edgeR)
set.seed(2)
y = counts(makeExampleDESeqDataSet())
dge = DGEList(y)
dgeEstimateDispersion = estimateCommonDisp(dge)
dgeEstimateTagWiseDispersion = estimateTagwiseDisp(dgeEstimateDispersion)
plotBCV(dgeEstimateTagWiseDispersion, cex = 0.8)
count_matrix <- read.delim('GSE176079_normalized_gene_counts_matrix.txt')
view(count_matrix)
View(count_matrix)
col_matrix <- read.delim('GSE176079_series_matrix.txt')
View(col_matrix)
count_matrix <- read.delim('GSE176079_normalized_gene_counts_matrix.txt')
View(count_matrix)
col_matrix <- read.delim('GSE176079_series_matrix.txt')
View(col_matrix)
gse <- getGEO(GEO = "GSE176079", GSEMatrix = TRUE)
library(GEOquery)
gse <- getGEO(GEO = "GSE176079", GSEMatrix = TRUE)
View(gse)
gse <- assayData(gse)
View(gse)
View(gse)
count_matrix <- read.delim('GSE176079_normalized_gene_counts_matrix.txt')
View(count_matrix)
col_matrix <- read.delim('GSE176079_series_matrix.txt')
library(GEOquery)
gse <- getGEO(GEO = "GSE176079", GSEMatrix = TRUE)
gse <- assayData(gse)
metadata <- pData(phenoData(gse[[1]]))
View(metadata)
View(col_matrix)
View(count_matrix)
gse <- getGEO(GEO = "GSE178240", GSEMatrix = TRUE)
gse <- assayData(gse)
metadata <- pData(phenoData(gse[[1]]))
View(metadata)
View(metadata)
