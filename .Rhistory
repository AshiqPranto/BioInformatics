plot(pca$x);
#BiocManager::install("Biobase");
library(Biobase); #This library for AnnotatedDataFrame function
annot = AnnotatedDataFrame(data = data.frame(condition, libType,
row.names = colnames(pseudoCount)));
expSet = new("ExpressionSet", exprs = as.matrix(pseudoCount), phenoData = annot);
library(DESeq2);
se <- SummarizedExperiment(pseudoCount, colData = rawColData);
#BiocManager::install("BiocGenerics")
#library(BiocGenerics)
#BiocManager::install("DESeq2")
plotPCA(DESeqTransform(se),intgroup = c("condition","type"))
x = pseudoCount;
s = rowMeans((x - rowMeans(x))^2);
#View(s);
o = order(s, decreasing = TRUE);
x = x[o, ];
x = x[1:ntop, ];
D <- matrix(0, ncol(x), ncol(x));
#str(x)
for(i in 1 : ncol(x))
{
for(j in 1 : ncol(x))
{
tempx = (x[, i] - x[, j])^2;
D[i, j] = sqrt(mean(tempx));
}
}
D = as.data.frame(D)
plot(D);
#ggplot(D)
fac = factor(paste(condition, libType, sep = " : "))
colours = brewer.pal(nlevels(fac), "Paired")
colours
library(limma)
plotMDS(pseudoCount, col = colours[as.numeric(fac)], labels = fac)
keep = rowSums(pseudoCount) > 0;
filterCount = pseudoCount[keep, ];
dim(rawCountTable)
dim(filterCount)
df = melt(filterCount, variable.name = "Samples");
#This is a function from the reshape2 package that is used for converting data from a wide format to a long format, which is often more suitable for various analyses and plotting.
df = data.frame(df, Condition = substr(df$Samples, 1, 7));
#View(df)
ggplot(df, aes(x = value, colour = Samples, fill = Samples)) +
geom_density(alpha = 0.2, size = 1.25) + facet_wrap(~ Condition) +
theme(legend.position = "top") + xlab("pseudocounts")
#BiocManager::install("edgeR")
library(edgeR)
pseudoCountCpm <- cpm(pseudoCount)
#BiocManager::install("edgeR")
library(edgeR)
cpmPseudoCount <- cpm(pseudoCount)
View(cpmPseudoCount)
plotData <- data.frame(
GeneName = c(rownames(pseudoCount), rownames(pseudoCount)),
CountValue = c(pseudoCount[, 1], pseudoCount[, 2])
)
View(plotData)
plotData <- data.frame(
GeneName = c(rownames(pseudoCount), rownames(pseudoCount)),
CountValue = c(pseudoCount[, 1], pseudoCount[, 2]),
Type = c(rep("Control1", times = nrow(pseudoCount)),rep("Control2", times = nrow(pseudoCount)))
)
scatter_plot <- ggplot(plotData, aes(x = GeneName, y = CountValue, color = Type)) + geom_point() +
labs(x = "Gene", y = "CountsValue", color = "Type")
print(scatter_plot)
#After cpm normalization
plotData <- data.frame(
GeneName = c(rownames(pseudoCount), rownames(pseudoCount)),
CountValue = c(cpmPseudoCount[, 1], cpmPseudoCount[, 2]),
Type = c(rep("Control1", times = nrow(pseudoCount)),rep("Control2", times = nrow(pseudoCount)))
)
scatter_plot <- ggplot(plotData, aes(x = GeneName, y = CountValue, color = Type)) + geom_point() +
labs(x = "Gene", y = "CountsValue", color = "Type")
print(scatter_plot)
#BiocManager::install("edgeR")
library(edgeR)
cpmPseudoCount <- cpm(pseudoCount)
plotData <- data.frame(
GeneName = c(rownames(pseudoCount), rownames(pseudoCount)),
CountValue = c(pseudoCount[, 1], pseudoCount[, 2]),
Type = c(rep("Control1", times = nrow(pseudoCount)),rep("Control2", times = nrow(pseudoCount)))
)
scatter_plot <- ggplot(plotData, aes(x = GeneName, y = CountValue, color = Type)) + geom_point() +
labs(x = "Gene", y = "CountsValue", color = "Type")
print(scatter_plot)
#After cpm normalization
plotData <- data.frame(
GeneName = c(rownames(pseudoCount), rownames(pseudoCount)),
CountValue = c(cpmPseudoCount[, 1], cpmPseudoCount[, 2]),
Type = c(rep("Control1", times = nrow(pseudoCount)),rep("Control2", times = nrow(pseudoCount)))
)
scatter_plot <- ggplot(plotData, aes(x = GeneName, y = CountValue, color = Type)) + geom_point() +
labs(x = "Gene", y = "CountsValue", color = "Type")
print(scatter_plot)
GeneName = c(rownames(pseudoCount)[100,], rownames(pseudoCount)[100,]),
plotData <- data.frame(
CountValue = c(pseudoCount[100, 1], pseudoCount[100, 2]),
#Type = c(rep("Control1", times = nrow(pseudoCount)),rep("Control2", times = nrow(pseudoCount)))
Type = c(rep("Control1", times = 100,rep("Control2", times = 100))
scatter_plot <- ggplot(plotData, aes(x = GeneName, y = CountValue, color = Type)) + geom_point() +
)
plotData <- data.frame(
CountValue = c(pseudoCount[100, 1], pseudoCount[100, 2]),
#Type = c(rep("Control1", times = nrow(pseudoCount)),rep("Control2", times = nrow(pseudoCount)))
Type = c(rep("Control1", times = 100,rep("Control2", times = 100))
scatter_plot <- ggplot(plotData, aes(x = GeneName, y = CountValue, color = Type)) + geom_point() +
scatter_plot <- ggplot(plotData, aes(x = GeneName, y = CountValue, color = Type)) + geom_point() +
labs(x = "Gene", y = "CountsValue", color = "Type");
print(scatter_plot)
plotData <- data.frame(
CountValue = c(pseudoCount[100, 1], pseudoCount[100, 2]),
#Type = c(rep("Control1", times = nrow(pseudoCount)),rep("Control2", times = nrow(pseudoCount)))
Type = c(rep("Control1", times = 100,rep("Control2", times = 100))
View(plotData)
View(plotData);
plotData <- data.frame(
GeneName = c(rownames(pseudoCount[100,]), rownames(pseudoCount[100,])),
CountValue = c(pseudoCount[100, 1], pseudoCount[100, 2]),
#Type = c(rep("Control1", times = nrow(pseudoCount)),rep("Control2", times = nrow(pseudoCount)))
Type = c(rep("Control1", times = 100),rep("Control2", times = 100)
));
View(plotData);
View(pseudoCount[100,1])
pseudoCount[100,1]
pseudoCount[1:100,1]
View(pseudoCount)
plotData <- data.frame(
GeneName = c(rownames(pseudoCount[1:100,]), rownames(pseudoCount[1:100,])),
CountValue = c(pseudoCount[1:100, 1], pseudoCount[1:100, 2]),
#Type = c(rep("Control1", times = nrow(pseudoCount)),rep("Control2", times = nrow(pseudoCount)))
Type = c(rep("Control1", times = 100),rep("Control2", times = 100)
));
View(plotData);
scatter_plot <- ggplot(plotData, aes(x = GeneName, y = CountValue, color = Type)) + geom_point() +
labs(x = "Gene", y = "CountsValue", color = "Type");
print(scatter_plot)
#After cpm normalization
plotData <- data.frame(
GeneName = c(rownames(cpmPseudoCount[1:100,]), rownames(pseudoCount[1:100,])),
CountValue = c(cpmPseudoCount[1:100, 1], cpmPseudoCount[1:100, 2]),
Type = c(rep("Control1", times = 100),rep("Control2", times = 100))
)
scatter_plot <- ggplot(plotData, aes(x = GeneName, y = CountValue, color = Type)) + geom_point() +
labs(x = "Gene", y = "CountsValue", color = "Type")
print(scatter_plot)
#After cpm normalization
plotData <- data.frame(
GeneName = c(rownames(cpmPseudoCount[1:100,]), rownames(pseudoCount[1:100,])),
CountValue = c(cpmPseudoCount[1:100, 1], cpmPseudoCount[1:100, 2]),
Type = c(rep("Control1", times = 100),rep("Control2", times = 100))
)
scatter_plot <- ggplot(plotData, aes(x = GeneName, y = CountValue, color = Type)) + geom_point() +
labs(x = "Gene", y = "CountsValue", color = "Type")
print(scatter_plot)
#BiocManager::install("edgeR")
library(edgeR)
cpmPseudoCount <- cpm(pseudoCount)
plotData <- data.frame(
GeneName = c(rownames(pseudoCount[1:100,]), rownames(pseudoCount[1:100,])),
CountValue = c(pseudoCount[1:100, 1], pseudoCount[1:100, 2]),
#Type = c(rep("Control1", times = nrow(pseudoCount)),rep("Control2", times = nrow(pseudoCount)))
Type = c(rep("Control1", times = 100),rep("Control2", times = 100)
));
#View(plotData);
scatter_plot <- ggplot(plotData, aes(x = GeneName, y = CountValue, color = Type)) + geom_point() +
labs(x = "Gene", y = "CountsValue", color = "Type");
print(scatter_plot)
#After cpm normalization
plotData <- data.frame(
GeneName = c(rownames(cpmPseudoCount[1:100,]), rownames(pseudoCount[1:100,])),
CountValue = c(cpmPseudoCount[1:100, 1], cpmPseudoCount[1:100, 2]),
Type = c(rep("Control1", times = 100),rep("Control2", times = 100))
)
scatter_plot <- ggplot(plotData, aes(x = GeneName, y = CountValue, color = Type)) + geom_point() +
labs(x = "Gene", y = "CountsValue", color = "Type")
print(scatter_plot)
numOfGene <- 100;
#BiocManager::install("edgeR")
library(edgeR)
cpmPseudoCount <- cpm(pseudoCount)
numOfGene <- 100;
plotData <- data.frame(
GeneName = c(rownames(pseudoCount[1:numOfGene,]), rownames(pseudoCount[1:numOfGene,])),
CountValue = c(pseudoCount[1:numOfGene, 1], pseudoCount[1:numOfGene, 2]),
#Type = c(rep("Control1", times = nrow(pseudoCount)),rep("Control2", times = nrow(pseudoCount)))
Type = c(rep("Control1", times = numOfGene),rep("Control2", times = numOfGene)
));
#View(plotData);
scatter_plot <- ggplot(plotData, aes(x = GeneName, y = CountValue, color = Type)) + geom_point() +
labs(x = "Gene", y = "CountsValue", color = "Type");
print(scatter_plot)
#After cpm normalization
plotData <- data.frame(
GeneName = c(rownames(cpmPseudoCount[1:numOfGene,]), rownames(pseudoCount[1:numOfGene,])),
CountValue = c(cpmPseudoCount[1:numOfGene, 1], cpmPseudoCount[1:numOfGene, 2]),
Type = c(rep("Control1", times = numOfGene),rep("Control2", times = numOfGene))
)
scatter_plot <- ggplot(plotData, aes(x = GeneName, y = CountValue, color = Type)) + geom_point() +
labs(x = "Gene", y = "CountsValue", color = "Type")
print(scatter_plot)
#BiocManager::install("edgeR")
library(edgeR)
cpmPseudoCount <- cpm(pseudoCount)
numOfGene <- 200;
plotData <- data.frame(
GeneName = c(rownames(pseudoCount[1:numOfGene,]), rownames(pseudoCount[1:numOfGene,])),
CountValue = c(pseudoCount[1:numOfGene, 1], pseudoCount[1:numOfGene, 2]),
#Type = c(rep("Control1", times = nrow(pseudoCount)),rep("Control2", times = nrow(pseudoCount)))
Type = c(rep("Control1", times = numOfGene),rep("Control2", times = numOfGene)
));
#View(plotData);
scatter_plot <- ggplot(plotData, aes(x = GeneName, y = CountValue, color = Type)) + geom_point() +
labs(x = "Gene", y = "CountsValue", color = "Type");
print(scatter_plot)
#After cpm normalization
plotData <- data.frame(
GeneName = c(rownames(cpmPseudoCount[1:numOfGene,]), rownames(pseudoCount[1:numOfGene,])),
CountValue = c(cpmPseudoCount[1:numOfGene, 1], cpmPseudoCount[1:numOfGene, 2]),
Type = c(rep("Control1", times = numOfGene),rep("Control2", times = numOfGene))
)
scatter_plot <- ggplot(plotData, aes(x = GeneName, y = CountValue, color = Type)) + geom_point() +
labs(x = "Gene", y = "CountsValue", color = "Type")
print(scatter_plot)
#BiocManager::install("edgeR")
library(edgeR)
cpmPseudoCount <- cpm(pseudoCount)
numOfGene <- 200;
plotData <- data.frame(
GeneName = c(rownames(pseudoCount[1:numOfGene,]), rownames(pseudoCount[1:numOfGene,])),
CountValue = c(pseudoCount[1:numOfGene, 1], pseudoCount[1:numOfGene, 2]),
#Type = c(rep("Control1", times = nrow(pseudoCount)),rep("Control2", times = nrow(pseudoCount)))
Type = c(rep("Control1", times = numOfGene),rep("Control2", times = numOfGene)
));
#View(plotData);
scatter_plot <- ggplot(plotData, aes(x = GeneName, y = CountValue, color = Type)) + geom_point() +
labs(x = "Gene", y = "CountsValue", color = "Type") +
ggtitle("Before CPM Normalization");
print(scatter_plot)
#After cpm normalization
plotData <- data.frame(
GeneName = c(rownames(cpmPseudoCount[1:numOfGene,]), rownames(pseudoCount[1:numOfGene,])),
CountValue = c(cpmPseudoCount[1:numOfGene, 1], cpmPseudoCount[1:numOfGene, 2]),
Type = c(rep("Control1", times = numOfGene),rep("Control2", times = numOfGene))
)
scatter_plot <- ggplot(plotData, aes(x = GeneName, y = CountValue, color = Type)) + geom_point() +
labs(x = "Gene", y = "CountsValue", color = "Type") +
ggtitle("After CPM Normalization");
print(scatter_plot)
#BiocManager::install("edgeR")
library(edgeR)
cpmPseudoCount <- cpm(pseudoCount)
numOfGene <- 300;
plotData <- data.frame(
GeneName = c(rownames(pseudoCount[1:numOfGene,]), rownames(pseudoCount[1:numOfGene,])),
CountValue = c(pseudoCount[1:numOfGene, 1], pseudoCount[1:numOfGene, 2]),
#Type = c(rep("Control1", times = nrow(pseudoCount)),rep("Control2", times = nrow(pseudoCount)))
Type = c(rep("Control1", times = numOfGene),rep("Control2", times = numOfGene)
));
#View(plotData);
scatter_plot <- ggplot(plotData, aes(x = GeneName, y = CountValue, color = Type)) + geom_point() +
labs(x = "Gene", y = "CountsValue", color = "Type") +
ggtitle("Before CPM Normalization");
print(scatter_plot)
#After cpm normalization
plotData <- data.frame(
GeneName = c(rownames(cpmPseudoCount[1:numOfGene,]), rownames(pseudoCount[1:numOfGene,])),
CountValue = c(cpmPseudoCount[1:numOfGene, 1], cpmPseudoCount[1:numOfGene, 2]),
Type = c(rep("Control1", times = numOfGene),rep("Control2", times = numOfGene))
)
scatter_plot <- ggplot(plotData, aes(x = GeneName, y = CountValue, color = Type)) + geom_point() +
labs(x = "Gene", y = "CountsValue", color = "Type") +
ggtitle("After CPM Normalization");
print(scatter_plot)
#BiocManager::install("edgeR")
library(edgeR)
cpmPseudoCount <- cpm(pseudoCount, normalized.lib.sizes = TRUE)
numOfGene <- 300;
plotData <- data.frame(
GeneName = c(rownames(pseudoCount[1:numOfGene,]), rownames(pseudoCount[1:numOfGene,])),
CountValue = c(pseudoCount[1:numOfGene, 1], pseudoCount[1:numOfGene, 2]),
#Type = c(rep("Control1", times = nrow(pseudoCount)),rep("Control2", times = nrow(pseudoCount)))
Type = c(rep("Control1", times = numOfGene),rep("Control2", times = numOfGene)
));
#View(plotData);
scatter_plot <- ggplot(plotData, aes(x = GeneName, y = CountValue, color = Type)) + geom_point() +
labs(x = "Gene", y = "CountsValue", color = "Type") +
ggtitle("Before CPM Normalization");
print(scatter_plot)
#After cpm normalization
plotData <- data.frame(
GeneName = c(rownames(cpmPseudoCount[1:numOfGene,]), rownames(pseudoCount[1:numOfGene,])),
CountValue = c(cpmPseudoCount[1:numOfGene, 1], cpmPseudoCount[1:numOfGene, 2]),
Type = c(rep("Control1", times = numOfGene),rep("Control2", times = numOfGene))
)
scatter_plot <- ggplot(plotData, aes(x = GeneName, y = CountValue, color = Type)) + geom_point() +
labs(x = "Gene", y = "CountsValue", color = "Type") +
ggtitle("After CPM Normalization");
print(scatter_plot)
#BiocManager::install("edgeR")
library(edgeR)
cpmPseudoCount <- cpm(pseudoCount)
numOfGene <- 300;
plotData <- data.frame(
GeneName = c(rownames(pseudoCount[1:numOfGene,]), rownames(pseudoCount[1:numOfGene,])),
CountValue = c(pseudoCount[1:numOfGene, 1], pseudoCount[1:numOfGene, 2]),
#Type = c(rep("Control1", times = nrow(pseudoCount)),rep("Control2", times = nrow(pseudoCount)))
Type = c(rep("Control1", times = numOfGene),rep("Control2", times = numOfGene)
));
#View(plotData);
scatter_plot <- ggplot(plotData, aes(x = GeneName, y = CountValue, color = Type)) + geom_point() +
labs(x = "Gene", y = "CountsValue", color = "Type") +
ggtitle("Before CPM Normalization");
print(scatter_plot)
#After cpm normalization
plotData <- data.frame(
GeneName = c(rownames(cpmPseudoCount[1:numOfGene,]), rownames(pseudoCount[1:numOfGene,])),
CountValue = c(cpmPseudoCount[1:numOfGene, 1], cpmPseudoCount[1:numOfGene, 2]),
Type = c(rep("Control1", times = numOfGene),rep("Control2", times = numOfGene))
)
scatter_plot <- ggplot(plotData, aes(x = GeneName, y = CountValue, color = Type)) + geom_point() +
labs(x = "Gene", y = "CountsValue", color = "Type") +
ggtitle("After CPM Normalization");
print(scatter_plot)
#BiocManager::install("edgeR")
library(edgeR)
#cpmPseudoCount <- cpm(pseudoCount)
cpmPseudoCount <- calcNormFactors(..., method = "upperquartile", p = 0.75)
#BiocManager::install("edgeR")
library(edgeR)
#cpmPseudoCount <- cpm(pseudoCount)
cpmPseudoCount <- calcNormFactors(..., method = "upperquartile", p = 0.75);
#BiocManager::install("edgeR")
library(edgeR)
#cpmPseudoCount <- cpm(pseudoCount)
cpmPseudoCount <- calcNormFactors(psueudoCount, method = "upperquartile", p = 0.75);
#BiocManager::install("edgeR")
library(edgeR)
#cpmPseudoCount <- cpm(pseudoCount)
cpmPseudoCount <- calcNormFactors(psueudoCount, method = "upperquartile", p = 0.75);
View(pseudoCount)
#cpmPseudoCount <- cpm(pseudoCount)
head(pseudoCount)
#BiocManager::install("edgeR")
library(edgeR)
#cpmPseudoCount <- cpm(pseudoCount)
head(pseudoCount)
cpmPseudoCount <- calcNormFactors(pseudoCount, method = "upperquartile", p = 0.75);
numOfGene <- 300;
plotData <- data.frame(
GeneName = c(rownames(pseudoCount[1:numOfGene,]), rownames(pseudoCount[1:numOfGene,])),
CountValue = c(pseudoCount[1:numOfGene, 1], pseudoCount[1:numOfGene, 2]),
#Type = c(rep("Control1", times = nrow(pseudoCount)),rep("Control2", times = nrow(pseudoCount)))
Type = c(rep("Control1", times = numOfGene),rep("Control2", times = numOfGene)
));
#View(plotData);
scatter_plot <- ggplot(plotData, aes(x = GeneName, y = CountValue, color = Type)) + geom_point() +
labs(x = "Gene", y = "CountsValue", color = "Type") +
ggtitle("Before CPM Normalization");
print(scatter_plot)
#After cpm normalization
plotData <- data.frame(
GeneName = c(rownames(cpmPseudoCount[1:numOfGene,]), rownames(pseudoCount[1:numOfGene,])),
CountValue = c(cpmPseudoCount[1:numOfGene, 1], cpmPseudoCount[1:numOfGene, 2]),
Type = c(rep("Control1", times = numOfGene),rep("Control2", times = numOfGene))
)
#BiocManager::install("edgeR")
library(edgeR)
#cpmPseudoCount <- cpm(pseudoCount)
cpmPseudoCount <- calcNormFactors(pseudoCount, method = "upperquartile", p = 0.75);
numOfGene <- 300;
plotData <- data.frame(
GeneName = c(rownames(pseudoCount[1:numOfGene,]), rownames(pseudoCount[1:numOfGene,])),
CountValue = c(pseudoCount[1:numOfGene, 1], pseudoCount[1:numOfGene, 2]),
#Type = c(rep("Control1", times = nrow(pseudoCount)),rep("Control2", times = nrow(pseudoCount)))
Type = c(rep("Control1", times = numOfGene),rep("Control2", times = numOfGene)
));
#View(plotData);
scatter_plot <- ggplot(plotData, aes(x = GeneName, y = CountValue, color = Type)) + geom_point() +
labs(x = "Gene", y = "CountsValue", color = "Type") +
ggtitle("Before CPM Normalization");
print(scatter_plot)
#After cpm normalization
plotData <- data.frame(
GeneName = c(rownames(cpmPseudoCount[1:numOfGene,]), rownames(pseudoCount[1:numOfGene,])),
CountValue = c(cpmPseudoCount[1:numOfGene, 1], cpmPseudoCount[1:numOfGene, 2]),
Type = c(rep("Control1", times = numOfGene),rep("Control2", times = numOfGene))
)
#cpmPseudoCount <- cpm(pseudoCount)
cpmPseudoCount <- calcNormFactors(pseudoCount, method = "upperquartile", p = 0.75);
numOfGene <- 300;
plotData <- data.frame(
GeneName = c(rownames(pseudoCount[1:numOfGene,]), rownames(pseudoCount[1:numOfGene,])),
CountValue = c(pseudoCount[1:numOfGene, 1], pseudoCount[1:numOfGene, 2]),
#Type = c(rep("Control1", times = nrow(pseudoCount)),rep("Control2", times = nrow(pseudoCount)))
Type = c(rep("Control1", times = numOfGene),rep("Control2", times = numOfGene)
));
#View(plotData);
scatter_plot <- ggplot(plotData, aes(x = GeneName, y = CountValue, color = Type)) + geom_point() +
labs(x = "Gene", y = "CountsValue", color = "Type") +
ggtitle("Before CPM Normalization");
print(scatter_plot)
#After cpm normalization
plotData <- data.frame(
GeneName = c(rownames(cpmPseudoCount[1:numOfGene,]), rownames(pseudoCount[1:numOfGene,])),
CountValue = c(cpmPseudoCount[1:numOfGene, 1], cpmPseudoCount[1:numOfGene, 2]),
Type = c(rep("Control1", times = numOfGene),rep("Control2", times = numOfGene))
)
scatter_plot <- ggplot(plotData, aes(x = GeneName, y = CountValue, color = Type)) + geom_point() +
labs(x = "Gene", y = "CountsValue", color = "Type") +
ggtitle("After CPM Normalization");
#After cpm normalization
plotData <- data.frame(
GeneName = c(rownames(cpmPseudoCount[1:numOfGene,]), rownames(pseudoCount[1:numOfGene,])),
CountValue = c(cpmPseudoCount[1:numOfGene, 1], cpmPseudoCount[1:numOfGene, 2]),
Type = c(rep("Control1", times = numOfGene),rep("Control2", times = numOfGene))
)
#After cpm normalization
plotData <- data.frame(
GeneName = c(rownames(cpmPseudoCount[1:numOfGene,]), rownames(pseudoCount[1:numOfGene,])),
CountValue = c(cpmPseudoCount[1:numOfGene, 1], cpmPseudoCount[1:numOfGene, 2]),
Type = c(rep("Control1", times = numOfGene),rep("Control2", times = numOfGene))
)
#After cpm normalization
plotData <- data.frame(
GeneName = c(rownames(PseudoCount[1:numOfGene,]), rownames(pseudoCount[1:numOfGene,])),
CountValue = c(cpmPseudoCount[1:numOfGene, 1], cpmPseudoCount[1:numOfGene, 2]),
Type = c(rep("Control1", times = numOfGene),rep("Control2", times = numOfGene))
)
#After cpm normalization
plotData <- data.frame(
GeneName = c(rownames(pseudoCount[1:numOfGene,]), rownames(pseudoCount[1:numOfGene,])),
CountValue = c(cpmPseudoCount[1:numOfGene, 1], cpmPseudoCount[1:numOfGene, 2]),
Type = c(rep("Control1", times = numOfGene),rep("Control2", times = numOfGene))
)
str(cpmPseudoCount)
cpmPseudoCount = as.data.frame(cpmPseudoCount)
#BiocManager::install("edgeR")
library(edgeR)
#cpmPseudoCount <- cpm(pseudoCount)
cpmPseudoCount <- calcNormFactors(pseudoCount, method = "upperquartile", p = 0.75);
cpmPseudoCount = as.data.frame(cpmPseudoCount)
numOfGene <- 300;
plotData <- data.frame(
GeneName = c(rownames(pseudoCount[1:numOfGene,]), rownames(pseudoCount[1:numOfGene,])),
CountValue = c(pseudoCount[1:numOfGene, 1], pseudoCount[1:numOfGene, 2]),
#Type = c(rep("Control1", times = nrow(pseudoCount)),rep("Control2", times = nrow(pseudoCount)))
Type = c(rep("Control1", times = numOfGene),rep("Control2", times = numOfGene)
));
#View(plotData);
scatter_plot <- ggplot(plotData, aes(x = GeneName, y = CountValue, color = Type)) + geom_point() +
labs(x = "Gene", y = "CountsValue", color = "Type") +
ggtitle("Before CPM Normalization");
print(scatter_plot)
#After cpm normalization
plotData <- data.frame(
GeneName = c(rownames(pseudoCount[1:numOfGene,]), rownames(pseudoCount[1:numOfGene,])),
CountValue = c(cpmPseudoCount[1:numOfGene, 1], cpmPseudoCount[1:numOfGene, 2]),
Type = c(rep("Control1", times = numOfGene),rep("Control2", times = numOfGene))
)
scatter_plot <- ggplot(plotData, aes(x = GeneName, y = CountValue, color = Type)) + geom_point() +
labs(x = "Gene", y = "CountsValue", color = "Type") +
ggtitle("After CPM Normalization");
print(scatter_plot)
View(cpmPseudoCount)
#cpmPseudoCount <- cpm(pseudoCount)
cpmPseudoCount <- calcNormFactors(pseudoCount, method = "upperquartile", p = 0.75);
cpmPseudoCount = as.data.frame(cpmPseudoCount)
#cpmPseudoCount <- cpm(pseudoCount)
#cpmPseudoCount <- calcNormFactors(pseudoCount, method = "upperquartile", p = 0.75);
cpmPseudoCount <- calcNormFactors(pseudoCount, method = "RLE")
cpmPseudoCount = as.data.frame(cpmPseudoCount)
#cpmPseudoCount <- cpm(pseudoCount)
#cpmPseudoCount <- calcNormFactors(pseudoCount, method = "upperquartile", p = 0.75);
#cpmPseudoCount <- calcNormFactors(pseudoCount, method = "RLE")
cpmPseudoCount <- calcNormFactors(pseudoCount, method = "TMM")
cpmPseudoCount <- cpm(pseudoCount)
#cpmPseudoCount <- calcNormFactors(pseudoCount, method = "upperquartile", p = 0.75);
#cpmPseudoCount <- calcNormFactors(pseudoCount, method = "RLE")
#cpmPseudoCount <- calcNormFactors(pseudoCount, method = "TMM")
cpmPseudoCount = as.data.frame(cpmPseudoCount)
#BiocManager::install("edgeR")
library(edgeR)
cpmPseudoCount <- cpm(pseudoCount)
#cpmPseudoCount <- calcNormFactors(pseudoCount, method = "upperquartile", p = 0.75);
#cpmPseudoCount <- calcNormFactors(pseudoCount, method = "RLE")
#cpmPseudoCount <- calcNormFactors(pseudoCount, method = "TMM")
cpmPseudoCount = as.data.frame(cpmPseudoCount)
View(cpmPseudoCount)
numOfGene <- 300;
plotData <- data.frame(
GeneName = c(rownames(pseudoCount[1:numOfGene,]), rownames(pseudoCount[1:numOfGene,])),
CountValue = c(pseudoCount[1:numOfGene, 1], pseudoCount[1:numOfGene, 2]),
#Type = c(rep("Control1", times = nrow(pseudoCount)),rep("Control2", times = nrow(pseudoCount)))
Type = c(rep("Control1", times = numOfGene),rep("Control2", times = numOfGene)
));
#View(plotData);
scatter_plot <- ggplot(plotData, aes(x = GeneName, y = CountValue, color = Type)) + geom_point() +
labs(x = "Gene", y = "CountsValue", color = "Type") +
ggtitle("Before CPM Normalization");
print(scatter_plot)
#After cpm normalization
plotData <- data.frame(
GeneName = c(rownames(pseudoCount[1:numOfGene,]), rownames(pseudoCount[1:numOfGene,])),
CountValue = c(cpmPseudoCount[1:numOfGene, 1], cpmPseudoCount[1:numOfGene, 2]),
Type = c(rep("Control1", times = numOfGene),rep("Control2", times = numOfGene))
)
scatter_plot <- ggplot(plotData, aes(x = GeneName, y = CountValue, color = Type)) + geom_point() +
labs(x = "Gene", y = "CountsValue", color = "Type") +
ggtitle("After CPM Normalization");
print(scatter_plot)
