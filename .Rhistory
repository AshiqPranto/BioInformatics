countsMatrix[2]
countsMatrix[1]
rownames(countsMatrix) <- countsMatrix[,'Symbol']
View(countsMatrix)
countsMatrix <- countsMatrix[,-1]
View(countsMatrix)
rownames(countsMatrix) <- countsMatrix[,'Symbol']
countsMatrix <- countsMatrix[,-1]
View(countsMatrix)
write.csv(countsMatrix, file = "CountsMatrix.csv")
countsMatrix <- read.table(file = paste0("GSE142025_RAW/", file_list[1]), header = TRUE)
for (i in 2:length(file_list)) {
tempCountMatrix <- read.table(file = paste0("GSE142025_RAW/", file_list[i]), header = TRUE)
if(all(countsMatrix$Symbol==tempCountMatrix$Symbol))
{
countsMatrix <- cbind(countsMatrix, tempCountMatrix[2])
}
else{
print("RowNames don't match...!")
}
}
View(countsMatrix)
rownames(countsMatrix) <- countsMatrix[,'Symbol']
countsMatrix <- countsMatrix[,-1]
View(countsMatrix)
write.csv(countsMatrix, file = "CountsMatrix.csv")
countsMatrix <- read.csv("CountsMatrix.csv", header = TRUE)
View(countsMatrix)
countsMatrix <- read.csv("CountsMatrix.csv", header = FALSE)
View(countsMatrix)
countsMatrix <- read.csv("CountsMatrix.csv", header = TRUE)
View(countsMatrix)
rownames(countsMatrix) <- countsMatrix[,'X]
View(countsMatrix)
View(countsMatrix)
rownames(countsMatrix) <- countsMatrix[,'X']
View(countsMatrix)
rownames(countsMatrix) <- countsMatrix[,'X']
View(countsMatrix)
countsMatrix <- countsMatrix[, -1]
View(countsMatrix)
View(countsMatrix)
library(GEOquery)
colData <- getGEO(GEO = "GSE142025", GSEMatrix = TRUE)
colData <- colData[["GSE142025_series_matrix.txt.gz"]]@phenoData@data
View(colData)
colData <- read.csv(file = "ColData_Matrix_GSE142025.csv")
View(colData)
View(colData)
rownames(colData) <- colData[, 'X']
colData <- colData[, -1]
View(colData)
View(countsMatrix)
all(rownames(countsMatrix) == colData$title)
all(colnames(countsMatrix) == colData$title)
all(colnames(countsMatrix) == colData$title)
colnames(countsMatrix) <- rownames(colData)
View(cnt2)
gc()
View(tempCountMatrix)
# after the above steps we can now import our countsmatrix from CountsMatrix.csv file directly and rename the rowNames to first columns
countsMatrix <- read.csv("CountsMatrix.csv", header = TRUE)
View(countsMatrix)
# after the above steps we can now import our countsmatrix from CountsMatrix.csv file directly and rename the rowNames to first columns
countsMatrix <- read.csv("CountsMatrix.csv", header = TRUE, row.names = 1)
View(countsMatrix)
# after the above steps we can now import our countsmatrix from CountsMatrix.csv file directly and rename the rowNames to first columns
countsMatrix <- read.csv("CountsMatrix.csv", header = TRUE, row.names = 2)
# after the above steps we can now import our countsmatrix from CountsMatrix.csv file directly and rename the rowNames to first columns
countsMatrix <- read.csv("CountsMatrix.csv", header = TRUE, row.names = 3)
# after the above steps we can now import our countsmatrix from CountsMatrix.csv file directly and rename the rowNames to first columns
countsMatrix <- read.csv("CountsMatrix.csv", header = TRUE, row.names = 1)
View(countsMatrix)
colData <- read.csv(file = "ColData_Matrix_GSE142025.csv")
View(colData)
colData <- read.csv(file = "ColData_Matrix_GSE142025.csv", row.names = 1)
View(colData)
counts <- read.csv("GSE140809_DENV_gene_count_matrix.csv") #import counts data
library(GEOquery)
colData <- getGEO(GEO = "GSE140809",GSEMatrix = TRUE)
colData <- colData[["GSE140809_series_matrix.txt.gz"]]@phenoData@data
View(colData)
View(colData)
counts1 <- counts
counts1 <- counts[,-1]
rownames(counts1) <- counts[,"gene_id"]
counts <- counts1
colnames(counts) <- substring(colnames(counts),2)
all(colnames(counts) == colData$description)
colnames(counts) <- rownames(colData)
all(colnames(counts) == rownames(colData))
countsNormalized <- read.csv("countsNormalizedCPMGSE140809.csv")
rownames(countsNormalized) <- countsNormalized[ ,'X'];
countsNormalized <- countsNormalized[ ,-1]
countsNormalized <- as.data.frame(countsNormalized)
View(countsNormalized)
nrow(countsNormalized)
acute.colDataIndex <- grepl("acute",colData$title)
acute.colDataIndex
acute.colData <- colData[acute.colDataIndex,]
nrow(acute.colData)
# after the above steps we can now import our countsmatrix from CountsMatrix.csv file directly and rename the rowNames to first columns
countsMatrix <- read.csv("CountsMatrix.csv", header = TRUE, row.names = 1)
colData <- read.csv(file = "ColData_Matrix_GSE142025.csv", row.names = 1)
Control.ColDataIndex <- grepl("control", colData$group.ch1)
Control.ColDataIndex
Control.ColDataIndex <- grepl("Control", colData$group.ch1)
Control.ColDataIndex
Control.CountMatrix <- countsMatrix[, Control.ColDataIndex]
View(Control.CountMatrix)
View(countsMatrix)
all(colnames(countsMatrix) == colData$title)
colnames(countsMatrix) <- rownames(colData)
Control.ColDataIndex <- grepl("Control", colData$group.ch1)
Control.ColDataIndex
Control.CountMatrix <- countsMatrix[, Control.ColDataIndex]
View(cnt2)
colnames(Control.CountMatrix) <- paste0("control", 1:9)
colnames(countsMatrix[, Control.ColDataIndex]) <- paste0("control", 1:9)
View(countsMatrix)
View(countsMatrix)
colnames(countsMatrix[, Control.ColDataIndex])
colnames(countsMatrix[, Control.ColDataIndex]) = paste0("control", 1:9)
print(colnames(countsMatrix[, Control.ColDataIndex]) = paste0("control", 1:9))
print(colnames(countsMatrix[, Control.ColDataIndex]) <-  paste0("control", 1:9))
colnames(countsMatrix)[Control.ColDataIndex] <- paste0("control", 1:9)
View(countsMatrix)
totalControlSample <- sum(Control.ColDataIndex)
totalControlSample
colnames(countsMatrix)[Control.ColDataIndex] <- paste0("control", 1:totalControlSample)
View(countsMatrix)
Early_DN.ColDataIndex <- grepl("Early_DN", colData$group.ch1)
totalEarly_DNSample <- sum(Control.ColDataIndex)
totalEarly_DNSample
totalEarly_DNSample <- sum(Early_DN.ColDataIndex)
totalEarly_DNSample
rownames(colData)[Early_DN.ColDataIndex]
colnames(countsMatrix)[Early_DN.ColDataIndex] <- paste0("early", 1:totalEarly_DNSample)
View(countsMatrix)
Advanced_DN.ColDataIndex <- grepl("Advanced_DN", colData$group.ch1)
totalAdvanced_DNSample <- sum(Advanced_DN.ColDataIndex)
totalAdvanced_DNSample
rownames(colData)[Advanced_DN.ColDataIndex]
colnames(countsMatrix)[Advanced_DN.ColDataIndex] <- paste0("advanced", 1:totalAdvanced_DNSample)
View(countsMatrix)
library(ggplot2)
ggplot(countsMatrix, aes(x = control1)) + geom_histogram(fill = "#525252", binwidth = 2000)
ggplot(countsMatrix, aes(x = control1)) + geom_histogram(fill = "#525252", binwidth = 5)
ggplot(countsMatrix, aes(x = control1)) + geom_histogram(fill = "#525252", binwidth = 1)
ggplot(countsMatrix, aes(x = control1)) + geom_histogram(fill = "#525252", binwidth = 0.5)
ggplot(countsMatrix, aes(x = control1)) + geom_histogram(fill = "#525252", binwidth = 0.2)
ggplot(countsMatrix, aes(x = control1)) + geom_histogram(fill = "#525252", binwidth = 0.1)
ggplot(countsMatrix, aes(x = control10)) + geom_histogram(fill = "#525252", binwidth = 0.1)
ggplot(countsMatrix, aes(x = control2)) + geom_histogram(fill = "#525252", binwidth = 0.1)
ggplot(countsMatrix, aes(x = control3)) + geom_histogram(fill = "#525252", binwidth = 0.1)
ggplot(countsMatrix, aes(x = control1)) + geom_histogram(fill = "#525252", binwidth = 0.1)
ggplot(countsMatrix, aes(x = conrol1)) + geom_histogram(fill = "#525252", binwidth = 0.1)
ggplot(countsMatrix, aes(x = control1)) + geom_histogram(fill = "#525252", binwidth = 0.1)
ggplot(countsMatrix, aes(x = control1)) + geom_histogram(fill = "#525252", binwidth = 0.01)
ggplot(countsMatrix, aes(x = control1)) + geom_histogram(fill = "#525252", binwidth = 0.1)
ggplot(countsMatrix, aes(x = control1)) + geom_histogram(fill = "#525252", binwidth = 0.4)
ggplot(countsMatrix, aes(x = control1)) + geom_histogram(fill = "#525252", binwidth = 0.1)
ggplot(data = countsMatrix, aes(x = control1)) + geom_histogram(fill = "#525252", binwidth = 0.1)
ggplot(data = countsMatrix, aes(x = control1)) + geom_histogram(fill = "#525252", binwidth = 0.1) + labs(title = "hello")
ggplot(data = countsMatrix, aes(x = control1)) + geom_histogram(fill = "#525252", binwidth = 0.1) + labs(title = control1)
ggplot(data = countsMatrix, aes(x = control1)) + geom_histogram(fill = "#525252", binwidth = 0.1) + labs(title = "control1")
sample_name <- "control1"
ggplot(data = countsMatrix, aes(x = sample_name)) + geom_histogram(fill = "#525252", binwidth = 0.1) + labs(title = "control1")
histogram_plots <- list()
for (i in 1:totalControlSample) {
sample_name <- paste0("control", i) #Generate the column name for sample
sample_data <- countsMatrix[, sample_name] #Extract the sample data
#Creating a histogram for the current sample
plot <- ggplot(data = data.frame(x = sample_data), aes(x = x)) +
geom_histogram(fill = "#525252", binwidth = 0.1) +
labs(title = sample_name)
histogram_plots[[i]] <- plot
}
# Display the histogram plots
for(i in 1:totalControlSample){
print(histogram_plots[[i]])
}
# Display the histogram plots
#for(i in 1:totalControlSample){
#  print(histogram_plots[[i]])
#}
library(gridExtra)
#Arrange the histogram plots in a 3x3 grid
grid.arrange(histogram_plots[[1]], histogram_plots[[2]], histogram_plots[[3]], histogram_plots[[4]], histogram_plots[[5]], histogram_plots[[6]], histogram_plots[[7]], histogram_plots[[8]], histogram_plots[[9]])
countsMatrix_log2 <- log2(countsMatrix + 1)
ggplot(data = countsMatrix_log2, aes(x = control1)) + geom_histogram(fill = '#525252', binwidth = 0.1)
ggplot(data = countsMatrix_log2, aes(x = control1)) + geom_histogram(fill = '#525252', binwidth = 0.01)
ggplot(data = countsMatrix_log2, aes(x = control1)) + geom_histogram(fill = '#525252', binwidth = 0.01) + labs(title = "control1 of log2")
knitr::opts_chunk$set(echo = TRUE)
pseudoCount = log2(rawCountTable + 1);
library("pasilla")
datafile = system.file("extdata/pasilla_gene_counts.tsv", package = "pasilla");
datafile;
rawCountTable = read.table(datafile, header = TRUE, row.names = 1);
head(rawCountTable);
colDataFile = system.file("extdata/pasilla_sample_annotation.csv", package = "pasilla");
colDataFile;
rawColData = read.csv(colDataFile);
head(rawColData);
condition <- rawColData$condition;
libType <- rawColData$type;
libType;
condition = c("control", "control", "control", "control", "treated", "treated", "treated")
libType = c("single-end", "single-end", "paired-end", "paired-end", "single-end",
"paired-end", "paired-end")
#Rename the first 4 columns
colnames(rawCountTable)[1:4] = paste0("control", 1:4);
head(rawCountTable);
library(ggplot2)
ggplot(rawCountTable, aes(x = control1)) + geom_histogram(fill = "#525252", binwidth = 2000);
pseudoCount = log2(rawCountTable + 1);
ggplot(pseudoCount, aes(x = control1)) + ylab(expression(log[2](count + 1))) +
geom_histogram(colour = "white", fill = "#525252", binwidth = 0.6);
#install.packages("reshape2")
library(reshape2)
#install.packages("reshape2")
library(reshape2)
df = melt(pseudoCount, variable.name = "Samples");
View(df)
df = data.frame(df, Condition = substr(df$Samples, 1, 7))
View(df)
df <- melt(countsMatrix, variable.name = "Samples")
df <- melt(countsMatrix, variable.name = "Samples")
View(df)
ggplot(df, aes(x = Samples, y = value)) + geom_boxplot()
ggplot(df, aes(x = Samples, y = value)) + geom_boxplot() + scale_fill_manual(values = c("#619CFF", "#F564E3"))
df <- melt(countsMatrix, variable.name = "Samples")
ggplot(df, aes(x = Samples, y = value)) + geom_boxplot() + scale_fill_manual(values = c("#619CFF", "#F564E3"))
View(df)
df <- data.frame(df, condition = substr(df$Samples, 1, 5))
ggplot(df, aes(x = Samples, y = value)) + geom_boxplot() + scale_fill_manual(values = c("#619CFF", "#F564E3"))
View(df)
ggplot(df, aes(x = Samples, y = value, fill = condition)) + geom_boxplot() + scale_fill_manual(values = c("#619CFF", "#F564E3"))
ggplot(df, aes(x = Samples, y = value, fill = condition)) + geom_boxplot()
View(countsMatrix_log2)
View(countsMatrix)
ggplot(df, aes(x = value, color = Samples, fill = Samples)) + geom_density(alpha = 0.2, size = 1.25)
ggplot(df, aes(x = value, color = Samples, fill = Samples)) + geom_density(alpha = 0.8, size = 1.25)
ggplot(df, aes(x = value, color = Samples, fill = Samples)) + geom_density(alpha = 0.2, size = 4.25)
ggplot(df, aes(x = value, color = Samples, fill = Samples)) + geom_density(alpha = 0.2, size = 1.25)
ggplot(df, aes(x = value, color = Samples, fill = Samples)) + ylim(c(0, 0.25)) geom_density(alpha = 0.2, size = 1.25)
ggplot(df, aes(x = value, color = Samples, fill = Samples)) + ylim(c(0, 0.25)) + geom_density(alpha = 0.2, size = 1.25)
ggplot(df, aes(x = value, color = Samples, fill = Samples)) + ylim(c(0, 0.25)) + geom_density(alpha = 0.2, size = 1.25) + facet_wrap(condition)
ggplot(df, aes(x = value, color = Samples, fill = Samples)) + ylim(c(0, 0.25)) + geom_density(alpha = 0.2, size = 1.25) + facet_wrap(df$condition)
ggplot(df, aes(x = value, color = Samples, fill = Samples)) + ylim(c(0, 0.25)) + geom_density(alpha = 0.2, size = 1.25)
ggplot(df, aes(x = value, color = Samples, fill = Samples)) + ylim(c(0, 0.25)) + geom_density(alpha = 0.2, size = 1.25)  + theme(legend.position = "top")
ggplot(df, aes(x = value, color = Samples, fill = Samples)) + ylim(c(0, 0.25)) + geom_density(alpha = 0.2, size = 1.25)  + theme(legend.position = "right")
# after the above steps we can now import our countsmatrix from CountsMatrix.csv file directly and rename the rowNames to first columns
countsMatrix <- read.csv("CountsMatrix.csv", header = TRUE, row.names = 1)
View(countsMatrix)
colData <- read.csv(file = "ColData_Matrix_GSE142025.csv", row.names = 1)
colData <- read.csv(file = "ColData_Matrix_GSE142025.csv", row.names = 1)
all(colnames(countsMatrix) == colData$title)
colnames(countsMatrix) <- rownames(colData)
View(countsMatrix)
Control.ColDataIndex <- grepl("Control", colData$group.ch1)
Control.ColDataIndex
totalControlSample <- sum(Control.ColDataIndex)
Control.CountMatrix <- countsMatrix[, Control.ColDataIndex]
colnames(Control.CountMatrix) <- paste0("control", 1:totalControlSample)
colnames(countsMatrix)[Control.ColDataIndex] <- paste0("control", 1:totalControlSample)
Early_DN.ColDataIndex <- grepl("Early_DN", colData$group.ch1)
totalEarly_DNSample <- sum(Early_DN.ColDataIndex)
totalEarly_DNSample
rownames(colData)[Early_DN.ColDataIndex]
colnames(countsMatrix)[Early_DN.ColDataIndex] <- paste0("early", 1:totalEarly_DNSample)
Advanced_DN.ColDataIndex <- grepl("Advanced_DN", colData$group.ch1)
Advanced_DN.ColDataIndex <- grepl("Advanced_DN", colData$group.ch1)
totalAdvanced_DNSample <- sum(Advanced_DN.ColDataIndex)
totalAdvanced_DNSample
rownames(colData)[Advanced_DN.ColDataIndex]
colnames(countsMatrix)[Advanced_DN.ColDataIndex] <- paste0("advanced", 1:totalAdvanced_DNSample)
library(ggplot2)
ggplot(data = countsMatrix, aes(x = control1)) + geom_histogram(fill = "#525252", binwidth = 0.1) + labs(title = "control1")
histogram_plots <- list()
for (i in 1:totalControlSample) {
sample_name <- paste0("control", i) #Generate the column name for sample
sample_data <- countsMatrix[, sample_name] #Extract the sample data
#Creating a histogram for the current sample
plot <- ggplot(data = data.frame(x = sample_data), aes(x = x)) +
geom_histogram(fill = "#525252", binwidth = 0.1) +
labs(title = sample_name)
histogram_plots[[i]] <- plot
}
# Display the histogram plots
#for(i in 1:totalControlSample){
#  print(histogram_plots[[i]])
#}
library(gridExtra)
#Arrange the histogram plots in a 3x3 grid
grid.arrange(histogram_plots[[1]], histogram_plots[[2]], histogram_plots[[3]], histogram_plots[[4]], histogram_plots[[5]], histogram_plots[[6]], histogram_plots[[7]], histogram_plots[[8]], histogram_plots[[9]])
countsMatrix_log2 <- log2(countsMatrix + 1)
ggplot(data = countsMatrix_log2, aes(x = control1)) + geom_histogram(fill = '#525252', binwidth = 0.01) + labs(title = "control1 of log2")
df <- melt(countsMatrix, variable.name = "Samples")
df <- melt(countsMatrix, variable.name = "Samples")
library(reshape2)
df <- melt(countsMatrix, variable.name = "Samples")
df <- data.frame(df, condition = substr(df$Samples, 1, 5))
ggplot(df, aes(x = Samples, y = value, fill = condition)) + geom_boxplot()
ggplot(df, aes(x = value, color = Samples, fill = Samples)) + ylim(c(0, 0.25)) + geom_density(alpha = 0.2, size = 1.25)  + theme(legend.position = "right")
M = countsMatrix[, 1] - countsMatrix[, 2]
A = (countsMatrix[, 1] + countsMatrix[, 2]) / 2
df = data.frame(A, M)
ggplot(df, aes(x = A, y = M)) + geom_point(size = 1.5, alpha = 1/5) +
geom_hline(color = "blue3") + stat_smooth(se = FALSE, method = "loess", color = "red3")
ggplot(df, aes(x = A, y = M)) + geom_point(size = 1.5, alpha = 1/5) +
geom_hline(yintercept = 0, color = "blue3") + stat_smooth(se = FALSE, method = "loess", color = "red3")
View(countsMatrix)
M = countsMatrix[, 'advanced1'] - countsMatrix[, 'advanced2']
A = (countsMatrix[, 1] + countsMatrix[, 2]) / 2
df = data.frame(A, M)
ggplot(df, aes(x = A, y = M)) + geom_point(size = 1.5, alpha = 1/5) +
geom_hline(yintercept = 0, color = "blue3") + stat_smooth(se = FALSE, method = "loess", color = "red3")
ggplot(df, aes(x = A, y = M)) + geom_point(size = 1.5, alpha = 1/5) +
geom_hline(yintercept = 0, color = "blue3") + stat_smooth(se = FALSE, method = "loess", color = "red3") + labs(title = "advanced1 vs advanced2")
plot <- ggplot(df, aes(x = A, y = M)) + geom_point(size = 1.5, alpha = 1/5) +
geom_hline(yintercept = 0, color = "blue3") + stat_smooth(se = FALSE, method = "loess", color = "red3") + labs(title = "advanced1 vs advanced2")
print(plot)
plot[i[i]] <- ggplot(df, aes(x = A, y = M)) + geom_point(size = 1.5, alpha = 1/5) +
geom_hline(yintercept = 0, color = "blue3") + stat_smooth(se = FALSE, method = "loess", color = "red3") + labs(title = "advanced1 vs advanced2")
plot <- list()
plot[i[i]] <- ggplot(df, aes(x = A, y = M)) + geom_point(size = 1.5, alpha = 1/5) +
geom_hline(yintercept = 0, color = "blue3") + stat_smooth(se = FALSE, method = "loess", color = "red3") + labs(title = "advanced1 vs advanced2")
plot[[1]] <- ggplot(df, aes(x = A, y = M)) + geom_point(size = 1.5, alpha = 1/5) +
geom_hline(yintercept = 0, color = "blue3") + stat_smooth(se = FALSE, method = "loess", color = "red3") + labs(title = "advanced1 vs advanced2")
print(plot)
M = countsMatrix[, paste0('advanced',1)] - countsMatrix[, paste0('advanced', i)]
#for(i in 23 : 27)
for(i in 2: 6)
{
M = countsMatrix[, paste0('advanced',1)] - countsMatrix[, paste0('advanced', i)]
A = (countsMatrix[, paste0('advanced', 1)] + countsMatrix[, paste0('advanced',i)]) / 2
df = data.frame(A, M)
plot[[i-1]] <- ggplot(df, aes(x = A, y = M)) + geom_point(size = 1.5, alpha = 1/5) +
geom_hline(yintercept = 0, color = "blue3") + stat_smooth(se = FALSE, method = "loess", color = "red3") + labs(title = paste0("advanced1 vs advanced", i))
}
print(plot)
View(df)
#print(plot)
library(gridExtra)
grid.arrange(plot[[1]],plot[[2]], plot[[3]], plot[[4]], plot[[5]])
grid.arrange(plot[[1]],plot[[2]], plot[[3]], [[4]], plot[[5]])
grid.arrange(plot[[1]],plot[[2]], plot[[3]], plot[[4]], plot[[5]])
mat.dist = countsMatrix
View(mat.dist)
mat.dist = countsMatrix
mat.dist = as.matrix(dist(t(mat.dist)))
mat.dist = mat.dist / max(mat.dist)
heatmap(mat.dist)
grid.arrange(plot[[1]],plot[[2]], plot[[3]], plot[[4]], plot[[5]])
print(plot)
View(countsMatrix)
### Ma plot for control samples
plot <- list()
#for(i in 23 : 27)
for(i in 2: 9)
{
M = countsMatrix[, paste0('control',1)] - countsMatrix[, paste0('control', i)]
A = (countsMatrix[, paste0('control', 1)] + countsMatrix[, paste0('control',i)]) / 2
df = data.frame(A, M)
plot[[i-1]] <- ggplot(df, aes(x = A, y = M)) + geom_point(size = 1.5, alpha = 1/5) +
geom_hline(yintercept = 0, color = "blue3") + stat_smooth(se = FALSE, method = "loess", color = "red3") + labs(title = paste0("control vs control", i))
}
#print(plot)
library(gridExtra)
grid.arrange(plot[[1]],plot[[2]], plot[[3]], plot[[4]], plot[[5]])
grid.arrange(plot[[1]],plot[[2]], plot[[3]], plot[[4]], plot[[5]], ncol = 3)
grid.arrange(grobs = plot, ncol = 3)
plot <- list()
#for(i in 23 : 27)
for(i in 2: 6)
{
M = countsMatrix[, paste0('advanced',1)] - countsMatrix[, paste0('advanced', i)]
A = (countsMatrix[, paste0('advanced', 1)] + countsMatrix[, paste0('advanced',i)]) / 2
df = data.frame(A, M)
plot[[i-1]] <- ggplot(df, aes(x = A, y = M)) + geom_point(size = 1.5, alpha = 1/5) +
geom_hline(yintercept = 0, color = "blue3") + stat_smooth(se = FALSE, method = "loess", color = "red3") + labs(title = paste0("advanced1 vs advanced", i))
}
#print(plot)
library(gridExtra)
grid.arrange(grobs = plot, ncol = 3)
grid.arrange(grobs = plot, ncol = 2)
### Ma plot for early_DN samples
plot <- list()
#for(i in 23 : 27)
for(i in 2: 6)
{
M = countsMatrix[, paste0('early',1)] - countsMatrix[, paste0('early', i)]
A = (countsMatrix[, paste0('early', 1)] + countsMatrix[, paste0('early',i)]) / 2
df = data.frame(A, M)
plot[[i-1]] <- ggplot(df, aes(x = A, y = M)) + geom_point(size = 1.5, alpha = 1/5) +
geom_hline(yintercept = 0, color = "blue3") + stat_smooth(se = FALSE, method = "loess", color = "red3") + labs(title = paste0("early1 vs early", i))
}
#print(plot)
library(gridExtra)
grid.arrange(grobs = plot, ncol = 3)
grid.arrange(grobs = plot, ncol = 3)
grid.arrange(grobs = plot, ncol = 2)
library(GEOquery)
colData <- getGEO(GEO = "GSE234754", GSEMatrix = TRUE)
View(colData)
View(colData[["GSE234754_series_matrix.txt.gz"]]@phenoData@data)
View(colData)
View(colData[["GSE234754_series_matrix.txt.gz"]]@phenoData@varMetadata)
colData <- colData[["GSE234754_series_matrix.txt.gz"]]@phenoData@data
write.csv(x = colData, file = "ColData_GSE234754.csv")
write.csv(colData, file = "ColData_GSE234754.csv")
# after the above steps we can now import our countsmatrix from CountsMatrix.csv file directly and rename the rowNames to first columns
countsMatrix <- read.csv("CountsMatrix.csv", header = TRUE, row.names = 1)
colData <- read.csv(file = "ColData_Matrix_GSE142025.csv", row.names = 1)
all(colnames(countsMatrix) == colData$title)
View(colData)
View(countsMatrix)
colnames(countsMatrix) <- rownames(colData)
Control.ColDataIndex <- grepl("Control", colData$group.ch1)
Control.ColDataIndex
totalControlSample <- sum(Control.ColDataIndex)
Control.CountMatrix <- countsMatrix[, Control.ColDataIndex]
colnames(Control.CountMatrix) <- paste0("control", 1:totalControlSample)
colnames(countsMatrix)[Control.ColDataIndex] <- paste0("control", 1:totalControlSample)
Early_DN.ColDataIndex <- grepl("Early_DN", colData$group.ch1)
totalEarly_DNSample <- sum(Early_DN.ColDataIndex)
totalEarly_DNSample
rownames(colData)[Early_DN.ColDataIndex]
colnames(countsMatrix)[Early_DN.ColDataIndex] <- paste0("early", 1:totalEarly_DNSample)
Advanced_DN.ColDataIndex <- grepl("Advanced_DN", colData$group.ch1)
totalAdvanced_DNSample <- sum(Advanced_DN.ColDataIndex)
totalAdvanced_DNSample
rownames(colData)[Advanced_DN.ColDataIndex]
colnames(countsMatrix)[Advanced_DN.ColDataIndex] <- paste0("advanced", 1:totalAdvanced_DNSample)
library(ggplot2)
ggplot(data = countsMatrix, aes(x = control1)) + geom_histogram(fill = "#525252", binwidth = 0.1) + labs(title = "control1")
histogram_plots <- list()
for (i in 1:totalControlSample) {
sample_name <- paste0("control", i) #Generate the column name for sample
sample_data <- countsMatrix[, sample_name] #Extract the sample data
#Creating a histogram for the current sample
plot <- ggplot(data = data.frame(x = sample_data), aes(x = x)) +
geom_histogram(fill = "#525252", binwidth = 0.1) +
labs(title = sample_name)
histogram_plots[[i]] <- plot
}
# Display the histogram plots
#for(i in 1:totalControlSample){
#  print(histogram_plots[[i]])
#}
library(gridExtra)
#Arrange the histogram plots in a 3x3 grid
grid.arrange(histogram_plots[[1]], histogram_plots[[2]], histogram_plots[[3]], histogram_plots[[4]], histogram_plots[[5]], histogram_plots[[6]], histogram_plots[[7]], histogram_plots[[8]], histogram_plots[[9]])
countsMatrix_log2 <- log2(countsMatrix + 1)
ggplot(data = countsMatrix_log2, aes(x = control1)) + geom_histogram(fill = '#525252', binwidth = 0.01) + labs(title = "control1 of log2")
library(reshape2)
df <- melt(countsMatrix, variable.name = "Samples")
library(reshape2)
df <- melt(countsMatrix, variable.name = "Samples")
df <- data.frame(df, condition = substr(df$Samples, 1, 5))
ggplot(df, aes(x = Samples, y = value, fill = condition)) + geom_boxplot()
ggplot(df, aes(x = value, color = Samples, fill = Samples)) + ylim(c(0, 0.25)) + geom_density(alpha = 0.2, size = 1.25)  + theme(legend.position = "right")
plot <- list()
#for(i in 23 : 27)
for(i in 2: 21)
{
M = countsMatrix[, paste0('advanced',1)] - countsMatrix[, paste0('advanced', i)]
A = (countsMatrix[, paste0('advanced', 1)] + countsMatrix[, paste0('advanced',i)]) / 2
df = data.frame(A, M)
plot[[i-1]] <- ggplot(df, aes(x = A, y = M)) + geom_point(size = 1.5, alpha = 1/5) +
geom_hline(yintercept = 0, color = "blue3") + stat_smooth(se = FALSE, method = "loess", color = "red3") + labs(title = paste0("advanced1 vs advanced", i))
}
#print(plot)
library(gridExtra)
grid.arrange(grobs = plot, ncol = 2)
plot <- list()
#for(i in 23 : 27)
for(i in 2: 21)
{
M = countsMatrix[, paste0('advanced',1)] - countsMatrix[, paste0('advanced', i)]
A = (countsMatrix[, paste0('advanced', 1)] + countsMatrix[, paste0('advanced',i)]) / 2
df = data.frame(A, M)
plot[[i-1]] <- ggplot(df, aes(x = A, y = M)) + geom_point(size = 1.5, alpha = 1/5) +
geom_hline(yintercept = 0, color = "blue3") + stat_smooth(se = FALSE, method = "loess", color = "red3") + labs(title = paste0("advanced1 vs advanced", i))
}
#print(plot)
library(gridExtra)
grid.arrange(grobs = plot, ncol = 2)
### Ma plot for control samples
plot <- list()
#for(i in 23 : 27)
for(i in 2: 9)
{
M = countsMatrix[, paste0('control',1)] - countsMatrix[, paste0('control', i)]
A = (countsMatrix[, paste0('control', 1)] + countsMatrix[, paste0('control',i)]) / 2
df = data.frame(A, M)
plot[[i-1]] <- ggplot(df, aes(x = A, y = M)) + geom_point(size = 1.5, alpha = 1/5) +
geom_hline(yintercept = 0, color = "blue3") + stat_smooth(se = FALSE, method = "loess", color = "red3") + labs(title = paste0("control1 vs control", i))
}
#print(plot)
library(gridExtra)
grid.arrange(grobs = plot, ncol = 3)
### Pheatmap
```{r}
mat.dist = countsMatrix
mat.dist = as.matrix(dist(t(mat.dist)))
mat.dist = mat.dist / max(mat.dist)
heatmap(mat.dist)
countsmatrix <- read.delim("countsDataRepeat/GSE193978_TANDEM_longitudinal_paper1_rawdata.txt")
View(countsmatrix)
View(countsmatrix)
