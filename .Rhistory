#library(affy);
#plotPCA(expSet, intgroup = c("condition", "libType"));
plot(
pca$x);
library(matrixStats) # this library for rowVars() function
pseudoCountMatrix = as.matrix(pseudoCount);
rv = rowVars(pseudoCountMatrix); # calculate variance for each row
ntop = 200;
selectIndex = order(rv, decreasing = TRUE)[1:ntop];
pca = prcomp(t(pseudoCount[selectIndex, ]));
#BiocManager::install("Biobase");
library(Biobase); #This library for AnnotatedDataFrame function
annot = AnnotatedDataFrame(data = data.frame(condition, libType,
row.names = colnames(pseudoCount)));
expSet = new("ExpressionSet", exprs = as.matrix(pseudoCount), phenoData = annot);
#se <- SummarizedExperiment(pseudoCount, colData = rawColData);
#BiocManager::install("BiocGenerics")
#library(BiocGenerics)
#BiocManager::install("DESeq2")
#library(DESeq2);
#BiocManager::install("affy")
#library(affy);
#plotPCA(expSet, intgroup = c("condition", "libType"));
plot(
pca$x);
library(matrixStats) # this library for rowVars() function
pseudoCountMatrix = as.matrix(pseudoCount);
rv = rowVars(pseudoCountMatrix); # calculate variance for each row
ntop = 500;
selectIndex = order(rv, decreasing = TRUE)[1:ntop];
pca = prcomp(t(pseudoCount[selectIndex, ]));
#BiocManager::install("Biobase");
library(Biobase); #This library for AnnotatedDataFrame function
annot = AnnotatedDataFrame(data = data.frame(condition, libType,
row.names = colnames(pseudoCount)));
expSet = new("ExpressionSet", exprs = as.matrix(pseudoCount), phenoData = annot);
#se <- SummarizedExperiment(pseudoCount, colData = rawColData);
#BiocManager::install("BiocGenerics")
#library(BiocGenerics)
#BiocManager::install("DESeq2")
#library(DESeq2);
#BiocManager::install("affy")
#library(affy);
#plotPCA(expSet, intgroup = c("condition", "libType"));
plot(
pca$x);
#BiocManager::install("BiocGenerics")
#library(BiocGenerics)
#BiocManager::install("DESeq2")
#library(DESeq2);
#BiocManager::install("affy")
#library(affy);
#plotPCA(expSet, intgroup = c("condition", "libType"));
plotPCA(expSet, intgroup = "condition", ntop = 500, returnData = FALSE)
knitr::opts_chunk$set(echo = TRUE)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
#BiocManager::install("pasilla")
library("pasilla")
datafile = system.file("extdata/pasilla_gene_counts.tsv", package = "pasilla");
datafile;
rawCountTable = read.table(datafile, header = TRUE, row.names = 1);
head(rawCountTable);
colDataFile = system.file("extdata/pasilla_sample_annotation.csv", package = "pasilla");
colDataFile
rawColData = read.csv(colDataFile);
head(rawColData);
condition <- rawColData$condition;
libType <- rawColData$type;
libType
#condition = c("control", "control", "control", "control", "treated", "treated", "treated")
#Rename the first 4 columns
colnames(rawCountTable)[1:4] = paste0("control", 1:4);
head(rawCountTable);
library(ggplot2)
ggplot(rawCountTable, aes(x = control1)) + geom_histogram(fill = "#525252", binwidth = 2000);
pseudoCount = log2(rawCountTable + 1);
ggplot(pseudoCount, aes(x = control1)) + ylab(expression(log[2](count + 1))) +
geom_histogram(colour = "white", fill = "#525252", binwidth = 0.6);
#install.packages("reshape2")
library(reshape2)
df = melt(pseudoCount, variable.name = "Samples");
df = data.frame(df, Condition = substr(df$Samples, 1, 7))
#str(df)
ggplot(df, aes(x = Samples, y = value, fill = Condition)) + geom_boxplot() + xlab("") +
ylab(expression(log[2](count + 1))) + scale_fill_manual(values = c("#619CFF", "#F564E3"))
ggplot(df, aes(x = value, colour = Samples, fill = Samples)) + ylim(c(0, 0.25)) +
geom_density(alpha = 0.2, size = 1.25) + facet_wrap(~ Condition) +
theme(legend.position = "top") + xlab(expression(log[2](count + 1)))
x = pseudoCount[, 1]
y = pseudoCount[, 2]
## M-values
M = x - y
## A-values
A = (x + y)/2
df = data.frame(A, M)
ggplot(df, aes(x = A, y = M)) + geom_point(size = 1.5, alpha = 1/5) +
geom_hline(yintercept = 0, color = "blue3") + stat_smooth(se = FALSE, method = "loess", color = "red3")
library(RColorBrewer) # this library for the brewer.pal() function
#BiocManager::install("ComplexHeatmap"); #complexheatmap is not a built in library, thats why we need to install it before use.
library(ComplexHeatmap); #this library is necessary for heatmap() function
#BiocManager::install("mixOmics")
#library(mixOmics) #Needed for cim() function
mat.dist = pseudoCount;
colnames(mat.dist) = paste(colnames(mat.dist), libType, sep = " : ");
mat.dist = as.matrix(dist(t(mat.dist)));
mat.dist = mat.dist/max(mat.dist);
hmcol = colorRampPalette(brewer.pal(9, "GnBu"))(16);
#cim(mat.dist, col = rev(hmcol), symkey = FALSE, margins = c(9, 9))
#cim() function is available in mixOmics library.
heatmap(mat.dist, col = rev(hmcol), margins = c(11, 11))
pseudoCountMatrix = as.matrix(pseudoCount);
rv = rowVars(pseudoCountMatrix); # calculate variance for each row
library(matrixStats) # this library for rowVars() function
rv = rowVars(pseudoCountMatrix); # calculate variance for each row
ntop = 500;
selectIndex = order(rv, decreasing = TRUE)[1:ntop];
pca = prcomp(t(pseudoCount[selectIndex, ]));
plot(
pca$x);
annot = AnnotatedDataFrame(data = data.frame(condition, libType,
row.names = colnames(pseudoCount)));
#BiocManager::install("Biobase");
library(Biobase); #This library for AnnotatedDataFrame function
annot = AnnotatedDataFrame(data = data.frame(condition, libType,
row.names = colnames(pseudoCount)));
expSet = new("ExpressionSet", exprs = as.matrix(pseudoCount), phenoData = annot);
#BiocManager::install("BiocGenerics")
#library(BiocGenerics)
#BiocManager::install("DESeq2")
#library(DESeq2);
#BiocManager::install("affy")
#library(affy);
#plotPCA(expSet, intgroup = c("condition", "libType"));
plotPCA(expSet, intgroup = "condition", ntop = 500, returnData = FALSE)
#BiocManager::install("BiocGenerics")
#library(BiocGenerics)
#BiocManager::install("DESeq2")
library(DESeq2);
#BiocManager::install("affy")
#library(affy);
#plotPCA(expSet, intgroup = c("condition", "libType"));
plotPCA(expSet, intgroup = "condition", ntop = 500, returnData = FALSE)
se <- SummarizedExperiment(pseudoCount, colData = annot);
se <- SummarizedExperiment(pseudoCount, colData = rawColData$condition);
#BiocManager::install("affy")
#library(affy);
#plotPCA(expSet, intgroup = c("condition", "libType"));
plotPCA(expSet, intgroup = "condition", ntop = 500, returnData = FALSE)
#BiocManager::install("affy")
#library(affy);
#plotPCA(expSet, intgroup = c("condition", "libType"));
plotPCA(se, intgroup = "condition", ntop = 500, returnData = FALSE)
se <- SummarizedExperiment(pseudoCountMatrix, colData = rawColData);
#BiocManager::install("BiocGenerics")
#library(BiocGenerics)
#BiocManager::install("DESeq2")
library(DESeq2);
plotPCA(pca)
#BiocManager::install("BiocGenerics")
library(BiocGenerics)
plotPCA(pca)
showMethods("plotPCA")
#BiocManager::install("affy")
#library(affy);
#plotPCA(expSet, intgroup = c("condition", "libType"));
plotPCA(expSet, intgroup = "condition", ntop = 500, returnData = FALSE)
#BiocManager::install("affy")
#library(affy);
plotPCA(expSet, intgroup = c("condition", "libType"));
#BiocManager::install("affy")
#library(affy);
plotPCA(expSet, intgroup = c("condition", "libType"));
showMethods("plotPCA")
plotPCA(DESeqTransform(se))
plotPCA(DESeqTransform(se),intgroup = c("condition", "libType"))
plotPCA(DESeqTransform(se),intgroup = "condition")
plotPCA(DESeqTransform(se),intgroup = "libType")
plotPCA(DESeqTransform(se),intgroup = "condition")
se <- SummarizedExperiment(pseudoCount, colData = rawColData);
plotPCA(DESeqTransform(se),intgroup = "condition")
plotPCA(DESeqTransform(se),intgroup = "condition")
plotPCA(DESeqTransform(se),intgroup = "libType")
colData(dds)
colData()
View(rawColData)
plotPCA(DESeqTransform(se),intgroup = "type")
plotPCA(DESeqTransform(se),intgroup = c("condition","type"))
#BiocManager::install("Biobase");
library(Biobase); #This library for AnnotatedDataFrame function
annot = AnnotatedDataFrame(data = data.frame(condition, libType,
row.names = colnames(pseudoCount)));
expSet = new("ExpressionSet", exprs = as.matrix(pseudoCount), phenoData = annot);
se <- SummarizedExperiment(pseudoCount, colData = rawColData);
#BiocManager::install("BiocGenerics")
#library(BiocGenerics)
#BiocManager::install("DESeq2")
library(DESeq2);
plotPCA(DESeqTransform(se),intgroup = c("condition","type"))
library(matrixStats) # this library for rowVars() function
pseudoCountMatrix = as.matrix(pseudoCount);
rv = rowVars(pseudoCountMatrix); # calculate variance for each row
ntop = 500;
selectIndex = order(rv, decreasing = TRUE)[1:ntop];
pca = prcomp(t(pseudoCount[selectIndex, ]));
plot(pca$x);
knitr::opts_chunk$set(echo = TRUE)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
#BiocManager::install("pasilla")
library("pasilla")
datafile = system.file("extdata/pasilla_gene_counts.tsv", package = "pasilla");
datafile;
rawCountTable = read.table(datafile, header = TRUE, row.names = 1);
head(rawCountTable);
colDataFile = system.file("extdata/pasilla_sample_annotation.csv", package = "pasilla");
colDataFile
rawColData = read.csv(colDataFile);
head(rawColData);
condition <- rawColData$condition;
libType <- rawColData$type;
libType
#condition = c("control", "control", "control", "control", "treated", "treated", "treated")
#Rename the first 4 columns
colnames(rawCountTable)[1:4] = paste0("control", 1:4);
head(rawCountTable);
library(ggplot2)
ggplot(rawCountTable, aes(x = control1)) + geom_histogram(fill = "#525252", binwidth = 2000);
pseudoCount = log2(rawCountTable + 1);
ggplot(pseudoCount, aes(x = control1)) + ylab(expression(log[2](count + 1))) +
geom_histogram(colour = "white", fill = "#525252", binwidth = 0.6);
#install.packages("reshape2")
library(reshape2)
df = melt(pseudoCount, variable.name = "Samples");
df = data.frame(df, Condition = substr(df$Samples, 1, 7))
#str(df)
ggplot(df, aes(x = Samples, y = value, fill = Condition)) + geom_boxplot() + xlab("") +
ylab(expression(log[2](count + 1))) + scale_fill_manual(values = c("#619CFF", "#F564E3"))
ggplot(df, aes(x = value, colour = Samples, fill = Samples)) + ylim(c(0, 0.25)) +
geom_density(alpha = 0.2, size = 1.25) + facet_wrap(~ Condition) +
theme(legend.position = "top") + xlab(expression(log[2](count + 1)))
x = pseudoCount[, 1]
y = pseudoCount[, 2]
## M-values
M = x - y
## A-values
A = (x + y)/2
df = data.frame(A, M)
ggplot(df, aes(x = A, y = M)) + geom_point(size = 1.5, alpha = 1/5) +
geom_hline(yintercept = 0, color = "blue3") + stat_smooth(se = FALSE, method = "loess", color = "red3")
library(RColorBrewer) # this library for the brewer.pal() function
#BiocManager::install("ComplexHeatmap"); #complexheatmap is not a built in library, thats why we need to install it before use.
library(ComplexHeatmap); #this library is necessary for heatmap() function
#BiocManager::install("mixOmics")
#library(mixOmics) #Needed for cim() function
mat.dist = pseudoCount;
colnames(mat.dist) = paste(colnames(mat.dist), libType, sep = " : ");
mat.dist = as.matrix(dist(t(mat.dist)));
mat.dist = mat.dist/max(mat.dist);
hmcol = colorRampPalette(brewer.pal(9, "GnBu"))(16);
#cim(mat.dist, col = rev(hmcol), symkey = FALSE, margins = c(9, 9))
#cim() function is available in mixOmics library.
heatmap(mat.dist, col = rev(hmcol), margins = c(11, 11))
library(matrixStats) # this library for rowVars() function
pseudoCountMatrix = as.matrix(pseudoCount);
rv = rowVars(pseudoCountMatrix); # calculate variance for each row
ntop = 500;
selectIndex = order(rv, decreasing = TRUE)[1:ntop];
pca = prcomp(t(pseudoCount[selectIndex, ]));
plot(pca$x);
#BiocManager::install("Biobase");
library(Biobase); #This library for AnnotatedDataFrame function
annot = AnnotatedDataFrame(data = data.frame(condition, libType,
row.names = colnames(pseudoCount)));
expSet = new("ExpressionSet", exprs = as.matrix(pseudoCount), phenoData = annot);
se <- SummarizedExperiment(pseudoCount, colData = rawColData);
library(DESeq2);
library(DESeq2);
se <- SummarizedExperiment(pseudoCount, colData = rawColData);
plotPCA(DESeqTransform(se),intgroup = c("condition","type"))
x = pseudoCount
head(x)
rowMeans(x)
rm = rowMeans(x)
View(rm)
s = rowMeans((x - rowMeans(x))^2)
o = order(s, decreasing = TRUE)
x = x[o, ]
x = x[1:ntop, ]
knitr::opts_chunk$set(echo = TRUE)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
#BiocManager::install("pasilla")
library("pasilla")
datafile = system.file("extdata/pasilla_gene_counts.tsv", package = "pasilla");
datafile;
rawCountTable = read.table(datafile, header = TRUE, row.names = 1);
head(rawCountTable);
colDataFile = system.file("extdata/pasilla_sample_annotation.csv", package = "pasilla");
colDataFile
rawColData = read.csv(colDataFile);
head(rawColData);
condition <- rawColData$condition;
libType <- rawColData$type;
libType
#condition = c("control", "control", "control", "control", "treated", "treated", "treated")
#Rename the first 4 columns
colnames(rawCountTable)[1:4] = paste0("control", 1:4);
head(rawCountTable);
library(ggplot2)
ggplot(rawCountTable, aes(x = control1)) + geom_histogram(fill = "#525252", binwidth = 2000);
pseudoCount = log2(rawCountTable + 1);
ggplot(pseudoCount, aes(x = control1)) + ylab(expression(log[2](count + 1))) +
geom_histogram(colour = "white", fill = "#525252", binwidth = 0.6);
#install.packages("reshape2")
library(reshape2)
df = melt(pseudoCount, variable.name = "Samples");
df = data.frame(df, Condition = substr(df$Samples, 1, 7))
#str(df)
ggplot(df, aes(x = Samples, y = value, fill = Condition)) + geom_boxplot() + xlab("") +
ylab(expression(log[2](count + 1))) + scale_fill_manual(values = c("#619CFF", "#F564E3"))
ggplot(df, aes(x = value, colour = Samples, fill = Samples)) + ylim(c(0, 0.25)) +
geom_density(alpha = 0.2, size = 1.25) + facet_wrap(~ Condition) +
theme(legend.position = "top") + xlab(expression(log[2](count + 1)))
x = pseudoCount[, 1]
y = pseudoCount[, 2]
## M-values
M = x - y
## A-values
A = (x + y)/2
df = data.frame(A, M)
ggplot(df, aes(x = A, y = M)) + geom_point(size = 1.5, alpha = 1/5) +
geom_hline(yintercept = 0, color = "blue3") + stat_smooth(se = FALSE, method = "loess", color = "red3")
library(RColorBrewer) # this library for the brewer.pal() function
#BiocManager::install("ComplexHeatmap"); #complexheatmap is not a built in library, thats why we need to install it before use.
library(ComplexHeatmap); #this library is necessary for heatmap() function
#BiocManager::install("mixOmics")
#library(mixOmics) #Needed for cim() function
mat.dist = pseudoCount;
colnames(mat.dist) = paste(colnames(mat.dist), libType, sep = " : ");
mat.dist = as.matrix(dist(t(mat.dist)));
mat.dist = mat.dist/max(mat.dist);
hmcol = colorRampPalette(brewer.pal(9, "GnBu"))(16);
#cim(mat.dist, col = rev(hmcol), symkey = FALSE, margins = c(9, 9))
#cim() function is available in mixOmics library.
heatmap(mat.dist, col = rev(hmcol), margins = c(11, 11))
library(matrixStats) # this library for rowVars() function
pseudoCountMatrix = as.matrix(pseudoCount);
rv = rowVars(pseudoCountMatrix); # calculate variance for each row
ntop = 500;
selectIndex = order(rv, decreasing = TRUE)[1:ntop];
pca = prcomp(t(pseudoCount[selectIndex, ]));
plot(pca$x);
#BiocManager::install("Biobase");
library(Biobase); #This library for AnnotatedDataFrame function
annot = AnnotatedDataFrame(data = data.frame(condition, libType,
row.names = colnames(pseudoCount)));
expSet = new("ExpressionSet", exprs = as.matrix(pseudoCount), phenoData = annot);
library(DESeq2);
se <- SummarizedExperiment(pseudoCount, colData = rawColData);
#BiocManager::install("BiocGenerics")
#library(BiocGenerics)
#BiocManager::install("DESeq2")
plotPCA(DESeqTransform(se),intgroup = c("condition","type"))
x = pseudoCount
s = rowMeans((x - rowMeans(x))^2)
str(s)
View(s)
View(s);
#View(s);
o = order(s, decreasing = TRUE)
order(s, decreasing = TRUE)
x = x[o, ]
View(x)
x = x[1:ntop, ]
colMeans((x[,i] - x[,j])^2)
D[i, j] = sqrt(colMeans((x[, i] - x[, j])^2))
fac = factor(paste(condition, libType, sep = " : "))
colours = brewer.pal(nlevels(fac), "Paired")
plotMDS(pseudoCount, col = colours[as.numeric(fac)], labels = fac)
library(limma)
plotMDS(pseudoCount, col = colours[as.numeric(fac)], labels = fac)
condition = c("control", "control", "control", "control", "treated", "treated", "treated")
libType = c("single-end", "single-end", "paired-end", "paired-end", "single-end",
"paired-end", "paired-end")
fac = factor(paste(condition, libType, sep = " : "))
colours = brewer.pal(nlevels(fac), "Paired")
library(limma)
plotMDS(pseudoCount, col = colours[as.numeric(fac)], labels = fac)
D[i, j] = sqrt(colMeans((x[, i] - x[, j])^2))
for(int i = 0; i< ncol(x);i++)
for(i in 1 : ncol(x))
for(i in 1 : ncol(x))
{
for(j in 1 : ncol(x))
{
D[i, j] = sqrt(colMeans((x[, i] - x[, j])^2))
}
}
View(x)
x
for(i in 1 : ncol(x))
{
for(j in 1 : ncol(x))
{
D[i, j] = sqrt(colMeans((x[, i] - x[, j])^2))
}
}
for(j in 1 : ncol(x))
{
D[i, j] = sqrt(colMeans((x[, i] - x[, j])^2))
}
x = pseudoCount
s = rowMeans((x - rowMeans(x))^2)
#View(s);
o = order(s, decreasing = TRUE)
x = x[o, ]
x = x[1:ntop, ]
x
colMeans((x[,i] - x[,j])^2)
x = pseudoCount
s = rowMeans((x - rowMeans(x))^2)
#View(s);
o = order(s, decreasing = TRUE)
x = x[o, ]
x = x[1:ntop, ]
x
for(i in 1 : ncol(x))
{
for(j in 1 : ncol(x))
{
D[i, j] = sqrt(colMeans((x[, i] - x[, j])^2))
}
}
x = pseudoCount
s = rowMeans((x - rowMeans(x))^2)
#View(s);
o = order(s, decreasing = TRUE)
x = x[o, ]
x = x[1:ntop, ]
x
for(i in 1 : ncol(x))
{
for(j in 1 : ncol(x))
{
D[i, j] = sqrt(mean((x[, i] - x[, j])^2))
}
}
x = pseudoCount
s = rowMeans((x - rowMeans(x))^2)
#View(s);
o = order(s, decreasing = TRUE)
x = x[o, ]
x = x[1:ntop, ]
x
for(i in 1 : ncol(x))
{
for(j in 1 : ncol(x))
{
D[i, j] <- sqrt(mean((x[, i] - x[, j])^2))
}
}
x = pseudoCount
s = rowMeans((x - rowMeans(x))^2)
#View(s);
o = order(s, decreasing = TRUE)
x = x[o, ]
x = x[1:ntop, ]
x
D <- matrix(0, ncol(x), ncol(x))
for(i in 1 : ncol(x))
{
for(j in 1 : ncol(x))
{
D[i, j] <- sqrt(mean((x[, i] - x[, j])^2))
}
}
plot(D)
x = pseudoCount
s = rowMeans((x - rowMeans(x))^2)
#View(s);
o = order(s, decreasing = TRUE)
x = x[o, ]
x = x[1:ntop+2000, ]
x
D <- matrix(0, ncol(x), ncol(x))
for(i in 1 : ncol(x))
{
for(j in 1 : ncol(x))
{
D[i, j] <- sqrt(mean((x[, i] - x[, j])^2))
}
}
plot(D)
x = pseudoCount
s = rowMeans((x - rowMeans(x))^2)
#View(s);
o = order(s, decreasing = TRUE)
x = x[o, ]
x = x[1:ntop+5000, ]
x
D <- matrix(0, ncol(x), ncol(x))
for(i in 1 : ncol(x))
{
for(j in 1 : ncol(x))
{
D[i, j] <- sqrt(mean((x[, i] - x[, j])^2))
}
}
plot(D)
pca$x
View(pca$x)
